{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///fusioncharts.jqueryplugin.min.js","webpack:///webpack/bootstrap 55d1fa98ab5b0e432f41","webpack:///./src/jquery-fusioncharts.js","webpack:///external \"fusioncharts\"","webpack:///external \"jquery\"","webpack:///./src/transcoder-htmltable/transcoder-htmltable.js"],"names":["root","factory","exports","module","require","define","amd","a","i","self","this","__WEBPACK_EXTERNAL_MODULE_1__","__WEBPACK_EXTERNAL_MODULE_2__","modules","__webpack_require__","moduleId","installedModules","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","FusionCharts","jQuery","HTMLTableTranscoder","win","window","addDep","renderFusionCharts","captureAllFusionChartsEvents","getChartObjectsFromSelection","configureLinkedCharts","doc","document","jQ","math","Math","mathMin","min","isArray","Array","objectToStringFn","toString","arrayToStringResult","subject","realtimeCommandMap","feed","setdata","setdataforid","getdata","getdataforid","clear","stop","start","optionsParser","feedData","options","stream","getData","isNaN","index","getDataForId","id","setData","value","label","arr","push","setDataForId","clearChart","stopUpdate","restartUpdate","elemList","chartOptions","cO","chartObj","scriptElement","length","parentNode","render","extend","renderAt","delayedRender","createElement","setAttribute","test","navigator","userAgent","opera","text","appendChild","createTextNode","eve","args","containerElement","event","Event","eventType","sender","containerElementId","trigger","addEventListener","obj","filter","add","find","chartObjects","linkConfigObj","level","each","configureLink","fn","insertFusionCharts","appendFusionCharts","insertMode","prependFusionCharts","attrFusionCharts","attr","attrVal","transfer","undefined","setChartAttribute","getChartAttribute","updateFusionCharts","fcChart","renderFlag","optStr","newChart","filterOpts","updateOptions","type","swfUrl","clone","dataSource","dataFormat","setChartData","width","height","resizeTo","chartType","cloneFusionCharts","callback","temp","disposeFusionCharts","dispose","_fcDrillDownLevel","convertToFusionCharts","chartOpts","convertOpts","transferObj","dataConfiguration","insertBefore","drillDownFusionChartsTo","j","len","configureOpts","arguments","streamFusionChartsData","command","method","params","toLowerCase","apply","expr","setHTMLTableData","dom","wrapper","format","toJSON","htmlTableToJSON","merge","obj1","obj2","item","str","sink","source","proto","deep","sanitizeNodesArray","nodeArr","sanitizedArr","nodeType","getTbody","tbl","tbodyArr","childNodes","nodeName","getThead","getTextFromNode","nodeEle","innerText","textContent","getColumnArr","rowArr","cellArr","rowSpanInc","columnArrIdx","colSpan","rowSpan","returnObj","rowNum","row","col","parseInt","getAttribute","arrayContains","checkData","childArr","parseFloat","_blankNo","getLabels","ignoreArr","opts","spanLen","isRowLabel","maxIdx","spanLength","tLabels","mostEmptyCellRow","internalLabel","emptyCellCount","textCellCount","spanTotal","totalSpanLength","labelObj","_extractByHeaderTag","_rowLabelIndex","replace","extractDataFromTable","getElementById","data","hideTable","style","display","rowCells","cellText","mapColumnIdx","columnSpan","cellEle","rowLabelMap","columnLabelMap","tempMap","dataMap","columnSpanObj","rowSpanObj","tableRows","concat","dataRows","dataColumns","tempColumn","k","isSingleSeries","indexOf","rowLabelSource","labelSource","colLabelSource","legendSource","major","useLabels","ignoreCols","useLegend","ignoreRows","convertBlankTo","labelMap","legendMap","createChartFromTable","item1","item2","categoryArr","datasetArr","dataObj","chartAttributes","showLabels","showLegend","seriesColors","labels","legend","config","chartJSON","datasets","chart","categories","category","dataset","seriesname","error","extension","requiresFusionCharts"],"mappings":"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","file":"fusioncharts.jqueryplugin.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"fusioncharts\"), require(\"jquery\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"fusioncharts\", \"jquery\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"fusioncharts\"), require(\"jquery\")) : factory(root[\"fusioncharts\"], root[\"jquery\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"fusioncharts\"), require(\"jquery\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"fusioncharts\", \"jquery\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"fusioncharts\"), require(\"jquery\")) : factory(root[\"fusioncharts\"], root[\"jquery\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar FusionCharts = __webpack_require__(1);\nvar jQuery = __webpack_require__(2);\nvar HTMLTableTranscoder = __webpack_require__(3);\n\nvar win = typeof window !== 'undefined' ? window : {};\n\nif (typeof FusionCharts === 'undefined') {\n    FusionCharts = win.FusionCharts;\n}\nif (typeof jQuery === 'undefined') {\n    jQuery = win.jQuery;\n}\n\nFusionCharts.addDep(HTMLTableTranscoder);\n\nvar doc = win.document,\n    jQ = jQuery,\n    renderFusionCharts,\n    captureAllFusionChartsEvents,\n    getChartObjectsFromSelection,\n    configureLinkedCharts,\n    math = win.Math,\n    mathMin = math.min,\n\n// FusionCharts = FusionCharts,\nisArray = function () {\n    // Use compiler's own isArray when available\n    if (Array.isArray) {\n        return Array.isArray;\n    }\n\n    // Retain references to variables for performance optimization\n    var objectToStringFn = Object.prototype.toString,\n        arrayToStringResult = objectToStringFn.call([]);\n\n    return function (subject) {\n        return objectToStringFn.call(subject) === arrayToStringResult;\n    };\n}(),\n    realtimeCommandMap = {\n    feed: 'feedData',\n    setdata: 'setData',\n    setdataforid: 'setDataForId',\n    getdata: 'getData',\n    getdataforid: 'getDataForId',\n    clear: 'clearChart',\n    stop: 'stopUpdate',\n    start: 'restartUpdate'\n},\n    optionsParser = {\n    feedData: function (options) {\n        if (typeof options === 'string') {\n            return [options];\n        } else if (typeof options === 'object' && options.stream) {\n            return [options.stream];\n        } else {\n            return false;\n        }\n    },\n    getData: function (options) {\n        // index is passed in case of multivalue charts.\n        if (!isNaN(options)) {\n            return [options];\n        } else if (typeof options === 'object' && options.index) {\n            return [options.index];\n        } else {\n            return [];\n        }\n    },\n    getDataForId: function (options) {\n        // index is passed in case of multivalue charts.\n        if (typeof options === 'string') {\n            return [options];\n        } else if (typeof options === 'object' && options.id) {\n            return [options.id];\n        } else {\n            return [];\n        }\n    },\n    setData: function (options, value, label) {\n        var arr = [];\n        if (typeof options !== 'object') {\n            arr = [options, value, label];\n        } else {\n            options.value && arr.push(options.value);\n            options.label && arr.push(options.label);\n        }\n\n        return arr;\n    },\n    setDataForId: function (options, value, label) {\n        var arr = [];\n        if (typeof options === 'string' || typeof value === 'string' || typeof label === 'string') {\n            arr = [options, value, label];\n        } else if (typeof options === 'object') {\n            options.value && arr.push(options.value);\n            options.label && arr.push(options.label);\n        }\n\n        return arr;\n    },\n    clearChart: function (options) {\n        return [options];\n    },\n    stopUpdate: function (options) {\n        return [options];\n    },\n    restartUpdate: function (options) {\n        return [options];\n    }\n};\n\n// Assign FusionCharts object to global jQuery object for easy use.\njQ.FusionCharts = FusionCharts;\n\n/**\n * Used purely for rendering the FusionCharts.\n * Acts as a common method that is invoked by all the APIs that create a\n * FusionChart object\n *\n * @param {array} elemList is a list of all the HTML elements that\n * are selected using the jQuery selectors\n *\n * @param {object} chartOptions is the options that are to be passed to\n * the FusionCharts contructor.\n */\n\nrenderFusionCharts = function (elemList, chartOptions) {\n    var i, l, cO, chartObj, scriptElement;\n\n    if (isArray(chartOptions) || chartOptions instanceof jQ) {\n        l = mathMin(elemList.length, chartOptions.length);\n    } else {\n        l = elemList.length;\n    }\n\n    for (i = 0; i < l; i += 1) {\n\n        // One-to-one mapping with the HTML elements in case of\n        // multiple option objects.\n        if (isArray(chartOptions) || chartOptions instanceof jQ) {\n            cO = chartOptions[i];\n        } else {\n            cO = chartOptions;\n        }\n\n        // check if the element is appended to the window document or not.\n        if (elemList[i].parentNode) {\n            // Adding the renderAt option to the chartOptions tells the\n            // constructor where to render the FusionCharts object.\n            FusionCharts.render(jQ.extend({}, cO, {\n                renderAt: elemList[i]\n            }));\n        } else {\n            chartObj = new FusionCharts(jQ.extend({}, cO, {\n                renderAt: elemList[i]\n            }));\n\n            if (!jQ.FusionCharts.delayedRender) {\n                jQ.FusionCharts.delayedRender = {};\n            }\n            jQ.FusionCharts.delayedRender[chartObj.id] = elemList[i];\n\n            scriptElement = doc.createElement('script');\n            scriptElement.setAttribute('type', 'text/javascript');\n\n            if (/msie/i.test(win.navigator.userAgent) && !win.opera) {\n                scriptElement.text = 'FusionCharts.items[\\'' + chartObj.id + '\\'].render();';\n            } else {\n                scriptElement.appendChild(doc.createTextNode('FusionCharts.items[\\'' + chartObj.id + '\\'].render()'));\n            }\n            elemList[i].appendChild(scriptElement);\n        }\n    }\n    return elemList;\n};\n\n/**\n *  Using jQuery's event model for attaching handlers to FusionCharts events.\n *  This is achieved by listening to the FusionCharts \"*\" event and then\n *  triggering a jQuery event on the associated DOM element.\n */\ncaptureAllFusionChartsEvents = function (eve, args) {\n    var containerElement, event;\n\n    // Extending our event with the jQuery event model for proper\n    // delegation and bubbling.\n    event = jQ.extend({}, eve);\n    jQ.extend(event, jQ.Event('fusioncharts' + eve.eventType));\n\n    // Checking if there is an associated DOM object\n    if (event.sender && event.sender.options) {\n        containerElement = event.sender.options.containerElement || event.sender.options.containerElementId;\n\n        if (typeof containerElement === 'object') {\n            jQ(containerElement).trigger(event, args);\n        } else if (jQ('#' + containerElement).length) {\n            jQ('#' + containerElement).trigger(event, args);\n        } else {\n            jQ(doc).trigger(event, args);\n        }\n    } else {\n        // If there is no DOM object associated with the FusionCharts object\n        // then triggering the event on the document itself for any possible\n        // global handlers that might want to capture it.\n        jQ(doc).trigger(event, args);\n    }\n};\n\nFusionCharts.addEventListener('*', captureAllFusionChartsEvents);\n\n/**\n * Used to select all the HTML object/embed elements that have been created\n * using the FusionCharts constructor\n *\n * @param {jQuery} obj, the selection of elements that need to be processed.\n *\n */\ngetChartObjectsFromSelection = function (obj) {\n\n    // The HTML object/embed may be part of the current selection or a\n    // child of the current selection. Need to take both cases into account.\n    // @note If the FusionCharts object has not been rendered yet, e.g in\n    // case the container is not appended to the document, then 'find' for\n    // that element will NOT return the corresponding FusionCharts object.\n    return obj.filter(':FusionCharts').add(obj.find(':FusionCharts'));\n};\n\n/**\n *  Used to configure the links at various levels in a linked chart.\n *\n *  @param {jQuery} chartObjects The FusionCharts objects for which the link\n *  has to be configured.\n *\n *  @param {object} linkConfigObj contains the configuration details of the\n *  linked chart like swfUrl, height, width etc.\n *\n *  @param {string} level contains the level at which the user wants to\n *  configure the link.\n *\n */\nconfigureLinkedCharts = function (chartObjects, linkConfigObj, level) {\n\n    if (typeof linkConfigObj === 'object') {\n        chartObjects.each(function () {\n            this.configureLink(linkConfigObj, level);\n        });\n    }\n};\n\n/**\n * @id: jQuery.fn.insertFusionCharts\n * @id: $.fn.insertFusionCharts\n *\n * @param {object} options contains the parameters that need to be passed\n * to the FusionCharts constructor\n *\n * Inserts the FusionCharts objects in the HTML elements that are selected\n * by the jQuery selector.\n */\njQ.fn.insertFusionCharts = function (options) {\n    return renderFusionCharts(this, options);\n};\n\n/**\n * @id: jQuery.fn.appendFusionCharts\n * @id: $.fn.appendFusionCharts\n *\n * @param {object} options contains that parameters that need to be passed\n * to the FusionCharts constructor\n *\n * Appends the FusionCharts objects immediately after the HTML elements\n * that are selected by the jQuery selector.\n */\njQ.fn.appendFusionCharts = function (options) {\n    options.insertMode = 'append';\n    return renderFusionCharts(this, options);\n};\n\n/**\n * @id: jQuery.fn.prependFusionCharts\n * @id: $.fn.prependFusionCharts\n *\n * @param {object} options contains the parameters that need to be passed\n * to the FusionCharts constructor\n *\n *  Prepends the FusionCharts objects before the HTML elements that are\n *  selected by the jQuery selector.\n */\njQ.fn.prependFusionCharts = function (options) {\n    options.insertMode = 'prepend';\n    return renderFusionCharts(this, options);\n};\n\n/**\n * @id: jQuery.fn.attrFusionCharts\n * @id: $.fn.attrFusionCharts\n *\n * @param {object|string} attr, If this is a string then it contains\n * the FusionCharts object's attribute that needs to be set or fetched.\n * If it is an object then, it contains the attributes along with the\n * corresponding values that need to be set on the FusionCharts object\n *\n * @param {string} attrVal, To be used if attr is a string. Contains the\n * value that needs to be set for the attribute that attr corresponds to.\n *\n *  Used to set or get the attribute(s) of the FusionCharts object.\n */\njQ.fn.attrFusionCharts = function (attr, attrVal) {\n\n    /**\n     * @ignore\n     * @todo Remove ignore\n     *\n     * @var {jQuery} chartsObjects stores the FusionCharts objects in\n     * the selected HTML elements.\n     * @var {object} transfer Holds all atttributes to be returned to the\n     * callee Function.\n     */\n    var transfer = [],\n        chartObjects = getChartObjectsFromSelection(this);\n\n    if (attrVal !== undefined) {\n        // Set the charts attribute attr with value attrVal.\n\n        chartObjects.each(function () {\n            this.FusionCharts.setChartAttribute(attr, attrVal);\n        });\n        return this;\n    }\n    if (typeof attr === 'object') {\n        // Set the charts attributes, in the passed object's keys with\n        // the corresponding values.\n\n        chartObjects.each(function () {\n            this.FusionCharts.setChartAttribute(attr);\n        });\n        return this;\n    }\n\n    // If both the above cases fail, user is trying to, in accordance with the\n    // jQuery paradigm, get the value of the arrtibute.\n    chartObjects.each(function () {\n        transfer.push(this.FusionCharts.getChartAttribute(attr));\n    });\n    return transfer;\n};\n\n/**\n * @id jQuery.fn.updateFusionCharts\n * @id $.fn.updateFusionCharts\n *\n * @param {object} options Contains the new options that the FusionCharts\n * objects need to update themselves with. Currently, using this interface\n * the dataType, data, width, height, debugMode and swfUrl can be updated.\n */\njQ.fn.updateFusionCharts = function (options) {\n\n    var filterOpts = {},\n        chartObjects = getChartObjectsFromSelection(this),\n        updateOptions = [['swfUrl', false], ['type', false], ['height', false], ['width', false], ['containerBackgroundColor', true], ['containerBackgroundAlpha', true], ['dataFormat', false], ['dataSource', false]],\n        i,\n        l,\n        fcChart,\n        renderFlag,\n        optStr,\n        newChart;\n\n    for (i = 0, l = updateOptions.length; i < l; i += 1) {\n        optStr = updateOptions[i][0];\n        filterOpts.type = filterOpts.type || filterOpts.swfUrl;\n        if (options[optStr]) {\n            if (updateOptions[i][1]) {\n                renderFlag = true;\n            }\n            filterOpts[optStr] = options[optStr];\n        }\n    }\n\n    chartObjects.each(function () {\n        // If height and width are given then resize the chart first.\n        fcChart = this.FusionCharts;\n        if (renderFlag) {\n            newChart = fcChart.clone(filterOpts);\n            newChart.render();\n            return;\n        }\n\n        if (filterOpts.dataSource !== undefined || filterOpts.dataFormat !== undefined) {\n            if (filterOpts.dataSource === undefined) {\n                fcChart.setChartData(fcChart.args.dataSource, filterOpts.dataFormat);\n            } else if (filterOpts.dataFormat === undefined) {\n                fcChart.setChartData(filterOpts.dataSource, fcChart.args.dataFormat);\n            } else {\n                fcChart.setChartData(filterOpts.dataSource, filterOpts.dataFormat);\n            }\n        }\n        if (filterOpts.width !== undefined || filterOpts.height !== undefined) {\n            fcChart.resizeTo(filterOpts.width, filterOpts.height);\n        }\n        if (filterOpts.type) {\n            fcChart.chartType(filterOpts.type);\n        }\n    });\n\n    return this;\n};\n\n/**\n *  @id: jQuery.fn.cloneFusionCharts\n *  @id: $.fn.cloneFusionCharts\n *\n *  @param {object} options The options object that takes the additional\n *  parameters to be passed while cloning the FusionCharts object.\n *\n *  @param {function} callback The callback function that has to be called\n *  once the FusionCharts objects have been cloned. This function will take\n *  the new clone objects as parameter.\n *\n */\njQ.fn.cloneFusionCharts = function (callback, options) {\n\n    var transfer, temp, chartObjects;\n\n    // Check if the options parameter, which is not mandatory, has been\n    // passed or not. If not, that means that options is the callback function.\n    if (typeof callback !== 'function' && typeof options === 'function') {\n        temp = callback;\n        callback = options;\n        options = temp;\n    }\n\n    transfer = [];\n    chartObjects = getChartObjectsFromSelection(this);\n\n    chartObjects.each(function () {\n        transfer.push(this.FusionCharts.clone(options, {}, true));\n    });\n\n    callback.call(jQ(transfer), transfer);\n\n    return this;\n};\n\n/**\n *  @id: jQuery.fn.disposeFusionCharts\n *  @id: $.fn.disposeFusionCharts\n *\n */\njQ.fn.disposeFusionCharts = function () {\n\n    var chartObjects = getChartObjectsFromSelection(this);\n\n    chartObjects.each(function () {\n        // Execute dispose on charts.\n        this.FusionCharts.dispose();\n\n        // Remove identifier reference variable\n        delete this.FusionCharts;\n\n        // cleanup any static objects pertaining to FusionCharts.\n        if (this._fcDrillDownLevel === 0) {\n            delete this._fcDrillDownLevel;\n        }\n    });\n\n    return this;\n};\n\n/**\n * @id jQuery.fn.covertToFusionCharts\n * @id $.fn.convertToFusionCharts\n *\n * @param {object} chartOpts Configuration options to generate FusionCharts.\n * See documentation to get the list.\n *\n * @param {object} convertOpts Configuration options to convert the table\n * into a FusionCharts object.\n * See documentation to get the list.\n *\n */\njQ.fn.convertToFusionCharts = function (chartOpts, convertOpts) {\n\n    var transferObj = [];\n\n    if (typeof chartOpts.dataConfiguration === 'undefined') {\n        chartOpts.dataConfiguration = {};\n    }\n\n    jQ.extend(true, chartOpts.dataConfiguration, convertOpts);\n\n    if (!chartOpts.dataSource) {\n        chartOpts.dataSource = this.get(0);\n    }\n\n    if (!chartOpts.renderAt) {\n        this.each(function () {\n            transferObj.push(jQ('<div></div>').insertBefore(this).insertFusionCharts(chartOpts).get(0));\n        });\n    } else {\n        if (typeof chartOpts.renderAt === 'string') {\n            transferObj.push(jQ('#' + chartOpts.renderAt).insertFusionCharts(chartOpts).get(0));\n        } else if (typeof chartOpts.renderAt === 'object') {\n            transferObj.push(jQ(chartOpts.renderAt).insertFusionCharts(chartOpts).get(0));\n        }\n    }\n\n    return jQ(transferObj);\n};\n\n/**\n * @id jQuery.fn.drillDownFusionChartsTo\n * @id $.fn.drillDownFusionChartsTo\n *\n * Used to set multi-level configurations of linked FusionCharts objects.\n * The levels are iterated depending on the number of configuration objects\n * in a single jQuery chain.\n *\n * To set the configuration at a specific level please refer to docs.\n */\njQ.fn.drillDownFusionChartsTo = function () {\n    var chartObjects = getChartObjectsFromSelection(this),\n        j,\n        len,\n        i,\n        l,\n        configureOpts;\n\n    // hack to support chaining of multiple drillDowns in a single chain\n    if (typeof this._fcDrillDownLevel === 'undefined') {\n        this._fcDrillDownLevel = 0;\n    }\n\n    for (j = 0, len = arguments.length; j < len; j += 1) {\n        configureOpts = arguments[j];\n\n        if (isArray(configureOpts)) {\n            for (i = 0, l = configureOpts.length; i < l; i += 1) {\n                configureLinkedCharts(chartObjects, configureOpts[i], this._fcDrillDownLevel);\n                this._fcDrillDownLevel += 1;\n            }\n        } else {\n            configureLinkedCharts(chartObjects, configureOpts, this._fcDrillDownLevel);\n            this._fcDrillDownLevel += 1;\n        }\n    }\n    return this;\n};\n\n/**\n * @id jQuery.fn.streamFusionChartsData\n * @id $.fn.streamFusionChartsData\n *\n * @param {string} command. Contains the type of operation to be performed on\n * the realtime charts. If not provided, by default the command would be 'feed'\n * that invokes the feedData method of the chart and passes the options to it.\n *\n * @param {object} options. Contains the options that has to be parsed (if it is a js object)\n * and passed to the chart method (corresponding to command).\n * If not an object, it is passed as is to the chart method.\n *\n * @param {object} value. To make the API morph the data setter methods (setData, setDataForId),\n * it can also be passed the same parameters as the setter functions.\n *\n * @param {object} label. To make the API morph the data setter methods (setData, setDataForId),\n * it can also be passed the same parameters as the setter functions.\n**/\n\njQ.fn.streamFusionChartsData = function (command, options, value, label) {\n\n    var chartObjects = getChartObjectsFromSelection(this),\n        transfer = [],\n        fcChart,\n        method,\n        params;\n\n    // Convert the command to lower case and fetch the proper chart method name.\n    method = realtimeCommandMap[command && command.toLowerCase()];\n\n    // Check if the command provided is valid or not.\n    if (method === undefined) {\n        // this means the command is not a getter. which in turn means that\n        // the command is a data stream string and has to be handled accordingly.\n        if (arguments.length === 1) {\n            params = [command];\n            method = realtimeCommandMap.feed;\n        } else {\n            return this;\n        }\n    } else if (arguments.length === 1) {\n        // command is to invoke a method without any parameters..\n        params = [];\n    } else {\n        // optionsParser returns an array of parameters to be passed to the\n        // chart method.\n        params = optionsParser[method](options, value, label);\n    }\n\n    if (method === 'getData' || method === 'getDataForId') {\n        chartObjects.each(function () {\n            fcChart = this.FusionCharts;\n            if (typeof fcChart[method] === 'function') {\n                transfer.push(fcChart[method].apply(fcChart, params));\n            }\n        });\n        return transfer;\n    } else {\n        chartObjects.each(function () {\n            fcChart = this.FusionCharts;\n            if (typeof fcChart[method] === 'function') {\n                fcChart[method].apply(fcChart, params);\n            }\n        });\n        return this;\n    }\n};\n\njQ.extend(jQ.expr[':'], {\n    /**\n     *  Extending the jQuery selector to select all object/embed elements that\n     *  have been created using the FusionCharts constructor i.e that are an\n     *  instance of FusionCharts.\n     *\n     *  @param {object} obj, Is the HTML element that is currently being\n     *  checked.\n     */\n    FusionCharts: function (obj) {\n        return obj.FusionCharts instanceof FusionCharts;\n    }\n});\n// }\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nvar win = window,\n    doc = win.document,\n    objectToStringFn = Object.prototype.toString,\n    merge = function (obj1, obj2) {\n    var item, str;\n    //check whether obj2 is an array\n    //if array then iterate through it's index\n    //**** MOOTOOLS precution\n    if (obj2 instanceof Array) {\n        for (item = 0; item < obj2.length; item += 1) {\n            if (typeof obj2[item] !== 'object') {\n                obj1[item] = obj2[item];\n            } else {\n                if (typeof obj1[item] !== 'object') {\n                    obj1[item] = obj2[item] instanceof Array ? [] : {};\n                }\n                merge(obj1[item], obj2[item]);\n            }\n        }\n    } else {\n        for (item in obj2) {\n            if (typeof obj2[item] === 'object') {\n                str = objectToStringFn.call(obj2[item]);\n                if (str === '[object Object]') {\n                    if (typeof obj1[item] !== 'object') {\n                        obj1[item] = {};\n                    }\n                    merge(obj1[item], obj2[item]);\n                } else if (str === '[object Array]') {\n                    if (!(obj1[item] instanceof Array)) {\n                        obj1[item] = [];\n                    }\n                    merge(obj1[item], obj2[item]);\n                } else {\n                    obj1[item] = obj2[item];\n                }\n            } else {\n                obj1[item] = obj2[item];\n            }\n        }\n    }\n    return obj1;\n},\n    extend = function (sink, source, proto, deep) {\n    var item;\n    // When 'proto' is marked as true, the methods and properties\n    // of source is not added to the prototype of the sink.\n    if (proto && sink.prototype) {\n        sink = sink.prototype;\n    }\n\n    // If deep extend is specified, then we use the deep copy function\n    // 'merge'\n    if (deep === true) {\n        merge(sink, source);\n    }\n    // Copy all methods and properties of the object passed in parameter\n    // to the object to which this function is attached.\n    else {\n            for (item in source) {\n                sink[item] = source[item];\n            }\n        }\n\n    return sink;\n},\n\n/**\n *  Used to remove all textNodes in an array of nodes. Textnodes get created\n *  inadvertently, when the table HTML has newline and space. Returns an\n *  array of nodes that is not an HTMLCollection and has only the non-text\n *  nodes in it.\n *\n *  @param {array} nodeArr Contains the array of nodes that have to be\n *  sanitized.\n */\nsanitizeNodesArray = function (nodeArr) {\n    var l,\n        i,\n        sanitizedArr = [];\n    for (i = 0, l = nodeArr.length; i < l; i += 1) {\n        // if nodeType != 3 then the node is not a text node.\n        if (nodeArr[i].nodeType !== 3) {\n            sanitizedArr.push(nodeArr[i]);\n        }\n    }\n    return sanitizedArr;\n},\n\n\n/**\n * Used to merge two JSON objects. The copy is a deep copy and not a\n * reference copy.\n *\n * @param: {object} srcJSON, the source json.\n *\n * @param: {object} targetJSON, that json that needs to be merged with the\n * source json.\n *\n */\nmergeJSON = function (srcJSON, targetJSON) {\n    var i, len, item;\n\n    if (targetJSON instanceof Array) {\n        for (i = 0, len = targetJSON.length; i < len; i++) {\n            if (targetJSON[i] instanceof Array) {\n                if (srcJSON[i] === undefined) {\n                    srcJSON[i] = [];\n                }\n                mergeJSON(srcJSON[i], targetJSON[i]);\n            } else if (typeof targetJSON[i] === 'object') {\n                if (typeof srcJSON[i] === 'undefined') {\n                    srcJSON[i] = {};\n                }\n                mergeJSON(srcJSON[i], targetJSON[i]);\n            } else {\n                srcJSON[i] = targetJSON[i];\n            }\n        }\n    } else if (typeof targetJSON === 'object') {\n        for (item in targetJSON) {\n            if (typeof srcJSON[item] === 'undefined') {\n                if (targetJSON[item] instanceof Array) {\n                    srcJSON[item] = [];\n                    mergeJSON(srcJSON[item], targetJSON[item]);\n                } else if (typeof srcJSON[item] === 'object') {\n                    srcJSON[i] = {};\n                    mergeJSON(srcJSON[i], targetJSON[i]);\n                } else {\n                    srcJSON[i] = targetJSON[i];\n                }\n            }\n        }\n    }\n\n    return srcJSON;\n},\n\n\n/**\n *  Returns the <tbody> element of the table. In order to support W3C\n *  non-compliant HTML, wherein the table does not have a <tbody> containing\n *  the <tr> & <td> elements, the table itself is returned.\n *\n *  @param {object} tbl Is the table whose tbody needs to fetched.\n *\n */\ngetTbody = function (tbl) {\n    var tbodyArr = sanitizeNodesArray(tbl.childNodes);\n\n    // Checking if the table's childNode is a tbody or not\n    if (tbodyArr.length) {\n        if (tbodyArr[0].nodeName === 'TBODY') {\n            return tbodyArr[0];\n        } else if (tbodyArr[0].nodeName === 'THEAD' && tbodyArr[1] && tbodyArr[1].nodeName === 'TBODY') {\n            return tbodyArr[1];\n        }\n    }\n    return tbl;\n},\n\n\n/**\n *  Returns an array containing the <td> in the <thead> tag.\n *\n *  @param {object} tbl Is the table whose tbody needs to fetched.\n *\n */\ngetThead = function (tbl) {\n    var tbodyArr = sanitizeNodesArray(tbl.childNodes);\n\n    // Checking if the table's childNode is a tbody or not\n    if (tbodyArr.length) {\n        if (tbodyArr[0].nodeName === 'THEAD' && tbodyArr[1] && tbodyArr[1].nodeName === 'TBODY') {\n            return tbodyArr[0].childNodes;\n        }\n    }\n    return [];\n},\n\n\n/**\n *  Used to return the text in a given Element. Needed as firefox does not\n *  support 'innerText', which is a W3C standard and instead uses\n *  textContent attribute to store the text.\n *\n *  @param {object} nodeEle The HTML element whose text is needed.\n */\ngetTextFromNode = function (nodeEle) {\n    return nodeEle.innerText !== undefined ? nodeEle.innerText : nodeEle.textContent;\n},\n\n\n/**\n *  Used to convert an array of rows into an array of corresponding columns.\n *\n *  @param {array} rowArr The array of table rows that has to be transposed\n *  into an array of columns.\n */\ngetColumnArr = function (rowArr) {\n\n    var i,\n        j,\n        l,\n        len,\n        cellArr,\n        rowSpanInc,\n        colSpan = 1,\n        columnArrIdx,\n        rowSpan = {},\n        returnObj = [];\n\n    for (i = 0, l = rowArr.length; i < l; i += 1) {\n\n        // get all the cells of the row\n        cellArr = sanitizeNodesArray(rowArr[i].childNodes);\n        colSpan = 1;\n        rowSpanInc = 0;\n        for (j = 0, len = cellArr.length; j < len; j += 1) {\n\n            // if a previous row had a cell with a rowspan then this\n            // rowspan needs to be taken into account while creating\n            // column array.\n            columnArrIdx = j + colSpan + rowSpanInc - 1;\n            if (rowSpan[columnArrIdx] && i - rowSpan[columnArrIdx].rowNum < rowSpan[columnArrIdx].row) {\n                rowSpanInc += rowSpan[columnArrIdx].col;\n                columnArrIdx += rowSpan[columnArrIdx].col;\n            }\n\n            if (parseInt(cellArr[j].getAttribute('rowspan'), 10) > 1) {\n                if (!rowSpan[columnArrIdx]) {\n                    rowSpan[columnArrIdx] = {};\n                }\n                rowSpan[columnArrIdx].rowNum = i;\n                rowSpan[columnArrIdx].row = parseInt(cellArr[j].getAttribute('rowspan'), 10);\n                // If the cell has both a rowspan and a colspan then they\n                // both need to be taken into consideration while calculating\n                // the column of cells in the susequent rows\n                if (parseInt(cellArr[j].getAttribute('colspan'), 10) > 1) {\n                    rowSpan[columnArrIdx].col = parseInt(cellArr[j].getAttribute('colspan'), 10);\n                } else {\n                    rowSpan[columnArrIdx].col = 1;\n                }\n            }\n\n            // The previous cells colspan, and the previous rows rowspans\n            // also needs to be added to the current cells index to get the\n            // proper column index.\n            while (returnObj.length <= columnArrIdx) {\n                returnObj.push({ childNodes: [] });\n            }\n            returnObj[columnArrIdx].childNodes.push(cellArr[j]);\n\n            // Adding the current cells colspan for subsequent cells in the\n            // current row.\n            if (parseInt(cellArr[j].getAttribute('colspan'), 10) > 1) {\n                colSpan += parseInt(cellArr[j].getAttribute('colspan'), 10) - 1;\n            }\n        }\n    }\n\n    return returnObj;\n},\n\n\n/**\n * Used to check if an item is present in an array or not.\n *\n * @param {array} arr The array which has to be checked\n *\n * @param {string|number|object} item The item which needs be checked if\n * present in array arr or not.\n */\narrayContains = function (arr, item) {\n    var i = arr.length;\n    // Using a decrementing while loop (optimization) since the order in which the\n    // array is traversed doesn't matter.\n    while (i) {\n        i -= 1;\n        if (arr[i] === item) {\n            return true;\n        }\n    }\n    return false;\n},\n\n\n/**\n * Used to check if a particular row or column has all non numeric (or blank)\n * content. If so, then that particular row/column must be ignored.\n *\n * @param {array} nodeArr Is an array of all the rows/columns of the table.\n *\n * @param {number} index of the row/column that is not to be analysed as it\n * has already been set aside as the label row/column.\n *\n * @param {number} j is the cell index at which we have to check for the\n * presence of numeric data in all the other rows and columns.\n */\n\ncheckData = function (nodeArr, j, index) {\n\n    var i,\n        l,\n        childArr = sanitizeNodesArray(nodeArr[j].childNodes),\n        text;\n\n    for (i = 0, l = childArr.length; i < l; i += 1) {\n        if (i !== index) {\n            text = getTextFromNode(childArr[i]);\n            if (parseFloat(text) === text) {\n                return true;\n            }\n        }\n    }\n    return false;\n},\n    _blankString = '__fcBLANK__',\n    _blankNo = 0,\n\n/**\n * Used to get the table row that has the labels (categories or legend) and\n * extract the label details from the corresponding row.\n *\n * @param {array} nodeArr Is an array of all the rows/columns of the table.\n *\n * @param {array} ignoreArr Is an array of all the indexes in the nodeArr\n * that need to be ignored. The items of this array can be negative as well.\n *\n * @param {string} index If the label row/column details have been given by\n * the user then this will contain the index which has the labels.\n *\n */\ngetLabels = function (nodeArr, ignoreArr, index, opts) {\n\n    var len,\n        l,\n        i,\n        j,\n        childArr,\n        mostEmptyCellRow = null,\n        internalLabel = [],\n        emptyCellCount = [],\n        textCellCount = 0,\n        temp,\n        returnObj = {},\n        spanTotal = 0,\n        spanLen,\n        isRowLabel,\n        maxIdx,\n        spanLength,\n        totalSpanLength = 0,\n        tLabels;\n\n    if (typeof index === 'undefined') {\n        // Checking if the user has provided the index. If index has not been\n        // passed then we assume that the user does not want to give a label row\n        // or column.\n\n        // Creating custom labels for all cells in the first row/column.\n        childArr = sanitizeNodesArray(nodeArr[0].childNodes);\n        for (j = 0, len = childArr.length; j < len; j += 1) {\n            spanLen = j + spanTotal;\n            internalLabel[spanLen] = _blankString + (spanLen + 1);\n\n            temp = parseInt(childArr[j].colSpan, 10);\n            temp = temp > 1 ? temp : parseInt(childArr[j].rowSpan, 10);\n            if (temp > 1) {\n                for (l = 1; l < temp; l += 1) {\n                    internalLabel[spanLen + l] = _blankString + (spanLen + l + 1);\n                }\n                spanTotal += temp - 1;\n            }\n        }\n\n        // Deleting the labels for the rows/columns that the user wants to\n        // ignore.\n        for (i = 0, l = j + spanTotal, len = ignoreArr.length; i < len; i += 1) {\n            if (ignoreArr[i] > 0) {\n                delete internalLabel[ignoreArr[i] - 1];\n            } else {\n                delete internalLabel[l + ignoreArr[i]];\n            }\n        }\n\n        return { 'index': -1, 'labelObj': internalLabel };\n    } else if (index === 0) {\n        // Checking if the user has provided the index. Since we expect row/column\n        // indices starting from 1, if index is 0 then we use our internal logic\n        // to find the label array from the given nodeArr.\n        for (i = 0, l = nodeArr.length; i < l; i += 1) {\n            childArr = sanitizeNodesArray(nodeArr[i].childNodes);\n            emptyCellCount[i] = 0;\n            textCellCount = 0;\n\n            if (opts && opts._extractByHeaderTag) {\n                for (j = 0, len = childArr.length; j < len; j += 1) {\n                    if (childArr[j].nodeName.toLowerCase() != 'th') {\n                        continue;\n                    }\n                    tLabels = getLabels(nodeArr, ignoreArr, i + 1);\n                    delete tLabels.labelObj[opts._rowLabelIndex];\n                    return tLabels;\n                }\n            } else {\n                for (j = 0, len = childArr.length; j < len; j += 1) {\n                    if (arrayContains(ignoreArr, j + 1) || arrayContains(ignoreArr, j - len)) {\n                        continue;\n                    }\n                    temp = getTextFromNode(childArr[j]);\n                    // Checking if the cell is emtpy.\n                    if (temp.replace(/^\\s*/, '').replace(/\\s*$/, '') === '') {\n                        emptyCellCount[i] += 1;\n                        continue;\n                    }\n                    // Checking if the cell has a non-number content\n                    if (parseFloat(temp) != temp) {\n                        textCellCount += 1;\n                        // If there are at least 2 cells that have non-number\n                        // content then we assume that they contain labels and\n                        // fetch the labels from this array of nodes.\n                        if (textCellCount > 1) {\n                            return getLabels(nodeArr, ignoreArr, i + 1);\n                        }\n                    }\n                }\n            }\n            // If there are empty cells then we assume that the array with\n            // the most number of empty cells must be the label array.\n            if (i > 0) {\n                if (emptyCellCount[i - 1] > emptyCellCount[i]) {\n                    mostEmptyCellRow = i - 1;\n                } else if (emptyCellCount[i - 1] < emptyCellCount[i]) {\n                    mostEmptyCellRow = i;\n                }\n            }\n        }\n        if (mostEmptyCellRow !== null) {\n            return getLabels(nodeArr, ignoreArr, mostEmptyCellRow + 1);\n        } else {\n            return getLabels(nodeArr, ignoreArr);\n        }\n    }\n\n    // If this is a negative number then, calulate the index from the\n    // end of the table. e.g -1 would imply the last row.\n    if (index < 0) {\n        index += nodeArr.length;\n    } else if (index > 0) {\n        index -= 1;\n    }\n\n    /**\n     * Once we have the index of the row/column that contains the labels we\n     * go through only that row/column and extract the labels.\n     */\n    childArr = sanitizeNodesArray(nodeArr[index].childNodes);\n\n    isRowLabel = nodeArr[0].nodeType !== undefined ? true : false;\n    for (j = 0, len = childArr.length; j < len; j += 1) {\n        spanLength = 0;\n        if (isRowLabel) {\n            if (childArr[j].colSpan !== '1') {\n                spanLength = parseInt(childArr[j].colSpan, 10);\n            }\n        } else if (childArr[j].rowSpan !== '1') {\n            spanLength = parseInt(childArr[j].rowSpan, 10);\n        }\n        spanLength = spanLength > 1 ? spanLength : 0;\n        temp = getTextFromNode(childArr[j]);\n        if (temp.replace(/^\\s*/, '').replace(/\\s*$/, '') !== '') {\n            returnObj[j + totalSpanLength] = temp;\n        } else if (checkData(getColumnArr(nodeArr), j, index)) {\n            // if the label text is missing in one of the cells of the labels\n            // row/column we check for the presence of numeric data in other\n            // cells of the corresponding column/row.\n\n            returnObj[j + totalSpanLength] = _blankString + _blankNo;\n            _blankNo += 1;\n        }\n\n        if (spanLength > 1) {\n            // If the spanLength > 1, then we create additional labels for\n            // rows/columns pertaining to the rowspan or colspan.\n            temp = returnObj[j + totalSpanLength];\n            for (i = 1; i < spanLength; i += 1) {\n                returnObj[j + totalSpanLength + i] = temp + ' (' + i + ')';\n            }\n\n            // totalSpanLength is used to adjust the indices of the\n            // subsequent cells using the rowspan/colspan of the current\n            // cell.\n            totalSpanLength += spanLength - 1;\n        }\n    }\n\n    // Deleting the rows/columns that the user wants to ignore.\n    maxIdx = len + totalSpanLength;\n    for (i = 0, len = ignoreArr.length; i < len; i += 1) {\n        if (ignoreArr[i] > 0) {\n            delete returnObj[ignoreArr[i] - 1];\n        } else {\n            delete returnObj[maxIdx + ignoreArr[i]];\n        }\n    }\n\n    return { 'labelObj': returnObj, 'index': index };\n},\n    extractDataFromTable = function (tbl, opts) {\n\n    if (typeof tbl === 'string') {\n        tbl = doc.getElementById(tbl);\n    }\n\n    if (typeof win.jQuery !== 'undefined' && tbl instanceof win.jQuery) {\n        // jshint ignore: line\n        tbl = tbl.get(0);\n    }\n\n    if (!tbl) {\n        return { data: null };\n    }\n\n    if (opts.hideTable) {\n        tbl.style.display = 'none';\n    }\n\n    var i,\n        j,\n        rowCells,\n        cellText,\n        dataMap = {},\n        mapColumnIdx,\n        columnSpan,\n        len,\n        item,\n        rowSpan,\n        cellEle,\n        columnSpanObj = {},\n        rowSpanObj = {},\n        tableRows = sanitizeNodesArray(getThead(tbl)).concat(sanitizeNodesArray(getTbody(tbl).childNodes)),\n        l = tableRows.length,\n        dataRows = 0,\n        dataColumns = 0,\n        tempColumn = 0,\n        rowLabelMap,\n        m,\n        k = 0,\n        columnLabelMap,\n        isSingleSeries = false,\n        chartType = opts.chartType,\n        tempMap,\n        singleSeriesCharts = ['column2d', 'column3d', 'pie3d', 'pie2d', 'line', 'bar2d', 'area2d', 'doughnut2d', 'doughnut3d', 'pareto2d', 'pareto3d'];\n\n    if (singleSeriesCharts.indexOf(chartType) !== -1) {\n        isSingleSeries = true;\n    }\n\n    // use rowLabelSource and colLabelSource to avoid confusion\n    opts.rowLabelSource = parseInt(opts.labelSource, 10);\n    opts.colLabelSource = parseInt(opts.legendSource, 10);\n    // Create the labels objects for the chart.\n\n    if (opts.major === 'column') {\n        rowLabelMap = opts.useLabels ? getLabels(tableRows, opts.ignoreCols, opts.rowLabelSource) : getLabels(tableRows, opts.ignoreCols);\n\n        columnLabelMap = opts.useLegend ? getLabels(getColumnArr(tableRows), opts.ignoreRows, opts.colLabelSource) : getLabels(getColumnArr(tableRows), opts.ignoreRows);\n    } else {\n        tempMap = getLabels(getColumnArr(tableRows), opts.ignoreRows, opts.rowLabelSource);\n        if (!opts.useLabels) {\n            rowLabelMap = getLabels(getColumnArr(tableRows), opts.ignoreRows);\n        } else {\n            rowLabelMap = tempMap;\n        }\n\n        opts._rowLabelIndex = tempMap.index;\n        opts._extractByHeaderTag = true;\n\n        columnLabelMap = opts.useLegend ? getLabels(tableRows, opts.ignoreCols, opts.colLabelSource, opts) : getLabels(tableRows, opts.ignoreCols);\n\n        delete opts._extractByHeaderTag;\n\n        tempMap = rowLabelMap;\n        rowLabelMap = columnLabelMap;\n        columnLabelMap = tempMap;\n    }\n\n    delete rowLabelMap.labelObj[columnLabelMap.index];\n    delete columnLabelMap.labelObj[rowLabelMap.index];\n\n    // Creating the 2d map depending on whether the rows are the primary\n    // keys or the columns.\n    if (opts.major === 'row') {\n        for (item in columnLabelMap.labelObj) {\n            dataMap[item] = {};\n        }\n    } else {\n        for (item in rowLabelMap.labelObj) {\n            dataMap[item] = {};\n        }\n    }\n\n    // Populating the dataMap.\n    for (i = 0; i < l; i += 1) {\n        if (rowLabelMap.index === i || columnLabelMap.labelObj[i] === undefined) {\n            continue;\n        }\n\n        dataRows += 1;\n        rowCells = sanitizeNodesArray(tableRows[i].childNodes);\n\n        // columnSpanObj maintains the number of colspans in the current\n        // row.\n        // rowSpanObj maintains the number of rowspans in a rows x columns\n        // map.\n        columnSpanObj[i] = 0;\n        rowSpanObj[i] = {};\n\n        for (j = 0, len = rowCells.length; j < len; j += 1) {\n\n            cellEle = rowCells[j];\n\n            columnSpan = parseInt(cellEle.getAttribute('colspan'), 10);\n            rowSpan = parseInt(cellEle.getAttribute('rowspan'), 10);\n\n            mapColumnIdx = j + columnSpanObj[i];\n\n            // Calculating the position of the current cell in the dataMap.\n            while (k < i) {\n                if (rowSpanObj[k]) {\n                    for (m in rowSpanObj[k]) {\n                        if (m > mapColumnIdx) {\n                            break;\n                        }\n\n                        if (i - k <= rowSpanObj[k][m].row) {\n                            mapColumnIdx += rowSpanObj[k][m].col;\n                        }\n                    }\n                }\n                k += 1;\n            }\n\n            if (columnSpan > 1) {\n                columnSpanObj[i] += columnSpan - 1;\n            }\n\n            if (rowSpan > 1) {\n                if (columnSpan > 1) {\n                    rowSpanObj[i][mapColumnIdx] = {\n                        row: rowSpan - 1,\n                        col: columnSpan\n                    };\n                } else {\n                    rowSpanObj[i][mapColumnIdx] = {\n                        row: rowSpan - 1,\n                        col: 1\n                    };\n                }\n            }\n            if (columnLabelMap.index === mapColumnIdx || rowLabelMap.labelObj[mapColumnIdx] === undefined) {\n\n                continue;\n            }\n\n            tempColumn += 1;\n            cellText = getTextFromNode(cellEle);\n            // If the cell does not have any text then we covert it by\n            // default to 0 or to an parameterized option set by user.\n            if (cellText.replace(/^\\s*/, '').replace(/\\s*$/, '') === '') {\n                if (opts.convertBlankTo) {\n                    cellText = opts.convertBlankTo;\n                } else {\n                    continue;\n                }\n            }\n\n            // Filling up the dataMap based on the rowspan, colspan and\n            // position(row=i, column=mapColumnIdx) information of the\n            // table cell.\n            columnSpan = columnSpan > 1 ? columnSpan : 1;\n            rowSpan = rowSpan > 1 ? rowSpan : 1;\n\n            if (opts.major === 'row') {\n                k = 0;\n                while (k < columnSpan) {\n                    m = 0;\n                    while (m < rowSpan) {\n                        dataMap[i + m][mapColumnIdx + k] = parseFloat(cellText);\n                        m += 1;\n                    }\n                    k += 1;\n                }\n            } else {\n                k = 0;\n                while (k < columnSpan) {\n                    m = 0;\n                    while (m < rowSpan) {\n                        dataMap[mapColumnIdx + k][i + m] = parseFloat(cellText);\n                        m += 1;\n                    }\n                    k += 1;\n                }\n            }\n        }\n        if (tempColumn > dataColumns) {\n            dataColumns = tempColumn;\n        }\n    }\n\n    return {\n        data: dataMap,\n        chartType: chartType ? !isSingleSeries ? 'multi' : 'single' : dataRows > 1 && dataColumns > 1 ? 'multi' : 'single',\n        labelMap: columnLabelMap,\n        legendMap: rowLabelMap\n    };\n},\n    createChartFromTable = function (data, obj) {\n\n    // Default configuration for HTMLTable data-handler\n    var opts = {\n        chartAttributes: {},\n        major: 'row',\n        useLabels: true,\n        useLegend: true,\n        labelSource: 0,\n        legendSource: 0,\n        ignoreCols: [],\n        ignoreRows: [],\n        showLabels: true,\n        showLegend: true,\n        seriesColors: [],\n        convertBlankTo: '0',\n        hideTable: false,\n        chartType: obj.chartType && obj.chartType(),\n\n        // Private Variables\n        labels: [],\n        legend: [],\n        data: []\n    },\n        config = obj.args.dataConfiguration || {},\n        i,\n        item1,\n        item2,\n        categoryArr,\n        datasetArr,\n        chartJSON = {},\n        datasets = {},\n        dataObj,\n        dataMap,\n        labelMap,\n        legendMap;\n\n    extend(opts, config);\n\n    dataObj = extractDataFromTable(data, opts);\n    dataMap = dataObj.data;\n\n    if (opts.major !== 'row') {\n        labelMap = dataObj.legendMap, legendMap = dataObj.labelMap;\n    } else {\n        labelMap = dataObj.labelMap, legendMap = dataObj.legendMap;\n    }\n\n    // chartAttributes should contain the configuration attributes for the chart\n    // e.g caption, xAxisName, yAxisName etc.\n    chartJSON.chart = extend({}, opts.chartAttributes);\n\n    if (dataObj.chartType === 'multi') {\n        chartJSON.categories = [{ 'category': [] }];\n        chartJSON.dataset = [];\n\n        categoryArr = chartJSON.categories[0].category;\n        datasetArr = chartJSON.dataset;\n\n        i = 0;\n        for (item1 in dataMap) {\n\n            if (opts.showLabels === true) {\n                // If the user has provided custom labels then those should be\n                // shown instead of the extracted labels.\n                categoryArr.push(extend({\n                    label: labelMap.labelObj[item1].indexOf(_blankString) != -1 ? '' : labelMap.labelObj[item1]\n                }, opts.labels[i]));\n            } else {\n                categoryArr.push({ 'label': '' });\n            }\n            i += 1;\n            for (item2 in dataMap[item1]) {\n                if (typeof datasets[item2] === 'undefined') {\n                    datasets[item2] = [];\n                }\n                datasets[item2].push({ 'value': dataMap[item1][item2] });\n            }\n        }\n\n        i = 0;\n        for (item1 in datasets) {\n            if (opts.showLegend === true) {\n                // If the user has provided custom labels then those should be\n                // shown instead of the extracted labels.\n                datasetArr.push(extend({\n                    'seriesname': legendMap.labelObj[item1].indexOf(_blankString) !== -1 ? '' : legendMap.labelObj[item1],\n                    'data': datasets[item1]\n                }, opts.legend[i]));\n            } else {\n                datasetArr.push({\n                    'seriesname': '',\n                    'data': datasets[item1]\n                });\n            }\n            i += 1;\n        }\n    } else if (dataObj.chartType === 'single') {\n        chartJSON.data = [];\n        datasetArr = chartJSON.data;\n\n        i = 0;\n        if (opts.showLabels) {\n            for (item1 in dataMap) {\n                for (item2 in dataMap[item1]) {\n                    datasetArr.push(extend({\n                        label: labelMap.labelObj[item1].indexOf(_blankString) !== -1 ? '' : labelMap.labelObj[item1],\n                        value: dataMap[item1][item2]\n                    }, opts.labels[i]));\n\n                    i += 1;\n                }\n            }\n        } else {\n            for (item1 in dataMap) {\n                for (item2 in dataMap[item1]) {\n                    datasetArr.push({ 'value': dataMap[item1][item2] });\n                }\n            }\n        }\n    }\n\n    return {\n        data: chartJSON,\n        error: undefined\n    };\n},\n    htmlTableToJSON = function (data, obj) {\n    return createChartFromTable(data, obj);\n};\n\n/**\n * method to set the HTML table data\n * @param {Object} dom: HTML table dom\n */\nfunction setHTMLTableData(dom) {\n    this.setChartData(dom, 'htmltable');\n}\n/**\n * method to add functions in the fusioncharts prototype\n * @param {Function} FusionCharts is required\n * @return {Object} for extension\n */\nfunction wrapper(FusionCharts) {\n    FusionCharts && (FusionCharts.prototype.setHTMLTableData = setHTMLTableData);\n    return {\n        format: 'htmltable',\n        toJSON: htmlTableToJSON\n    };\n}\n\nmodule.exports = {\n    extension: wrapper,\n    name: 'HTMLTable',\n    type: 'transcoder',\n    requiresFusionCharts: true\n};\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// fusioncharts.jqueryplugin.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 55d1fa98ab5b0e432f41","var FusionCharts = require('fusioncharts');\nvar jQuery = require('jquery');\nvar HTMLTableTranscoder = require('./transcoder-htmltable/transcoder-htmltable');\n\nvar win = typeof window !== 'undefined' ? window : {};\n\nif (typeof FusionCharts === 'undefined') {\n    FusionCharts = win.FusionCharts;\n}\nif (typeof jQuery === 'undefined') {\n    jQuery = win.jQuery;\n}\n\nFusionCharts.addDep(HTMLTableTranscoder);\n\nvar doc = win.document,\n    jQ = jQuery,\n    renderFusionCharts,\n    captureAllFusionChartsEvents,\n    getChartObjectsFromSelection,\n    configureLinkedCharts,\n    math = win.Math,\n    mathMin = math.min,\n    // FusionCharts = FusionCharts,\n    isArray = (function () {\n        // Use compiler's own isArray when available\n        if (Array.isArray) {\n            return Array.isArray;\n        }\n\n        // Retain references to variables for performance optimization\n        var objectToStringFn = Object.prototype.toString,\n            arrayToStringResult = objectToStringFn.call([]);\n\n        return function (subject) {\n            return objectToStringFn.call(subject) === arrayToStringResult;\n        };\n    }()),\n    realtimeCommandMap = {\n        feed: 'feedData',\n        setdata: 'setData',\n        setdataforid: 'setDataForId',\n        getdata: 'getData',\n        getdataforid: 'getDataForId',\n        clear: 'clearChart',\n        stop: 'stopUpdate',\n        start: 'restartUpdate'\n    },\n    optionsParser = {\n        feedData: function (options) {\n            if (typeof options === 'string') {\n                return [options];\n            }\n            else if (typeof options === 'object' && options.stream) {\n                return [options.stream];\n            }\n            else {\n                return false;\n            }\n        },\n        getData: function (options) {\n            // index is passed in case of multivalue charts.\n            if (!isNaN(options)) {\n                return [options];\n            }\n            else if (typeof options === 'object' && options.index) {\n                return [options.index];\n            }\n            else {\n                return [];\n            }\n        },\n        getDataForId: function (options) {\n            // index is passed in case of multivalue charts.\n            if (typeof options === 'string') {\n                return [options];\n            }\n            else if (typeof options === 'object' && options.id) {\n                return [options.id];\n            }\n            else {\n                return [];\n            }\n        },\n        setData: function (options, value, label) {\n            var arr = [];\n            if (typeof options !== 'object') {\n                arr = [options, value, label];\n            }\n            else {\n                options.value && arr.push(options.value);\n                options.label && arr.push(options.label);\n            }\n\n            return arr;\n        },\n        setDataForId: function (options, value, label) {\n            var arr = [];\n            if (typeof options === 'string' || typeof value === 'string' ||\n                    typeof label === 'string') {\n                arr = [options, value, label];\n            }\n            else if (typeof options === 'object') {\n                options.value && arr.push(options.value);\n                options.label && arr.push(options.label);\n            }\n\n            return arr;\n        },\n        clearChart: function (options) {\n            return [options];\n        },\n        stopUpdate: function (options) {\n            return [options];\n        },\n        restartUpdate: function (options) {\n            return [options];\n        }\n    };\n\n// Assign FusionCharts object to global jQuery object for easy use.\njQ.FusionCharts = FusionCharts;\n\n/**\n * Used purely for rendering the FusionCharts.\n * Acts as a common method that is invoked by all the APIs that create a\n * FusionChart object\n *\n * @param {array} elemList is a list of all the HTML elements that\n * are selected using the jQuery selectors\n *\n * @param {object} chartOptions is the options that are to be passed to\n * the FusionCharts contructor.\n */\n\nrenderFusionCharts = function (elemList, chartOptions) {\n    var i,\n        l,\n        cO,\n        chartObj,\n        scriptElement;\n\n    if (isArray(chartOptions) || chartOptions instanceof jQ) {\n        l = mathMin(elemList.length, chartOptions.length);\n    }\n    else {\n        l = elemList.length;\n    }\n\n    for (i = 0; i < l; i += 1) {\n\n        // One-to-one mapping with the HTML elements in case of\n        // multiple option objects.\n        if (isArray(chartOptions) || chartOptions instanceof jQ) {\n            cO = chartOptions[i];\n        } else {\n            cO = chartOptions;\n        }\n\n        // check if the element is appended to the window document or not.\n        if (elemList[i].parentNode) {\n            // Adding the renderAt option to the chartOptions tells the\n            // constructor where to render the FusionCharts object.\n            FusionCharts.render(jQ.extend({}, cO, {\n                renderAt: elemList[i]\n            }));\n        } else {\n            chartObj = new FusionCharts(jQ.extend({}, cO, {\n                renderAt: elemList[i]\n            }));\n\n            if (!jQ.FusionCharts.delayedRender) {\n                jQ.FusionCharts.delayedRender = {};\n            }\n            jQ.FusionCharts.delayedRender[chartObj.id] = elemList[i];\n\n            scriptElement = doc.createElement('script');\n            scriptElement.setAttribute('type', 'text/javascript');\n\n            if (/msie/i.test(win.navigator.userAgent) && !win.opera) {\n                scriptElement.text = 'FusionCharts.items[\\'' + chartObj.id + '\\'].render();';\n            } else {\n                scriptElement.appendChild(\n                    doc.createTextNode('FusionCharts.items[\\'' + chartObj.id + '\\'].render()')\n                );\n            }\n            elemList[i].appendChild(scriptElement);\n        }\n    }\n    return elemList;\n};\n\n/**\n *  Using jQuery's event model for attaching handlers to FusionCharts events.\n *  This is achieved by listening to the FusionCharts \"*\" event and then\n *  triggering a jQuery event on the associated DOM element.\n */\ncaptureAllFusionChartsEvents = function (eve, args) {\n    var containerElement,\n        event;\n\n    // Extending our event with the jQuery event model for proper\n    // delegation and bubbling.\n    event = jQ.extend({}, eve);\n    jQ.extend(event, jQ.Event('fusioncharts' + eve.eventType));\n\n    // Checking if there is an associated DOM object\n    if (event.sender && event.sender.options) {\n        containerElement = event.sender.options.containerElement ||\n            event.sender.options.containerElementId;\n\n        if (typeof containerElement === 'object') {\n            jQ(containerElement).trigger(event, args);\n        }\n        else if (jQ('#' + containerElement).length) {\n            jQ('#' + containerElement).trigger(event, args);\n        }\n        else {\n            jQ(doc).trigger(event, args);\n        }\n    } else {\n        // If there is no DOM object associated with the FusionCharts object\n        // then triggering the event on the document itself for any possible\n        // global handlers that might want to capture it.\n        jQ(doc).trigger(event, args);\n    }\n};\n\nFusionCharts.addEventListener('*', captureAllFusionChartsEvents);\n\n/**\n * Used to select all the HTML object/embed elements that have been created\n * using the FusionCharts constructor\n *\n * @param {jQuery} obj, the selection of elements that need to be processed.\n *\n */\ngetChartObjectsFromSelection = function (obj) {\n\n    // The HTML object/embed may be part of the current selection or a\n    // child of the current selection. Need to take both cases into account.\n    // @note If the FusionCharts object has not been rendered yet, e.g in\n    // case the container is not appended to the document, then 'find' for\n    // that element will NOT return the corresponding FusionCharts object.\n    return obj.filter(':FusionCharts').add(obj.find(':FusionCharts'));\n};\n\n/**\n *  Used to configure the links at various levels in a linked chart.\n *\n *  @param {jQuery} chartObjects The FusionCharts objects for which the link\n *  has to be configured.\n *\n *  @param {object} linkConfigObj contains the configuration details of the\n *  linked chart like swfUrl, height, width etc.\n *\n *  @param {string} level contains the level at which the user wants to\n *  configure the link.\n *\n */\nconfigureLinkedCharts = function (chartObjects, linkConfigObj, level) {\n\n    if (typeof linkConfigObj === 'object') {\n        chartObjects.each(function () {\n            this.configureLink(linkConfigObj, level);\n        });\n    }\n};\n\n/**\n * @id: jQuery.fn.insertFusionCharts\n * @id: $.fn.insertFusionCharts\n *\n * @param {object} options contains the parameters that need to be passed\n * to the FusionCharts constructor\n *\n * Inserts the FusionCharts objects in the HTML elements that are selected\n * by the jQuery selector.\n */\njQ.fn.insertFusionCharts = function (options) {\n    return renderFusionCharts(this, options);\n\n};\n\n/**\n * @id: jQuery.fn.appendFusionCharts\n * @id: $.fn.appendFusionCharts\n *\n * @param {object} options contains that parameters that need to be passed\n * to the FusionCharts constructor\n *\n * Appends the FusionCharts objects immediately after the HTML elements\n * that are selected by the jQuery selector.\n */\njQ.fn.appendFusionCharts = function (options) {\n    options.insertMode = 'append';\n    return renderFusionCharts(this, options);\n};\n\n/**\n * @id: jQuery.fn.prependFusionCharts\n * @id: $.fn.prependFusionCharts\n *\n * @param {object} options contains the parameters that need to be passed\n * to the FusionCharts constructor\n *\n *  Prepends the FusionCharts objects before the HTML elements that are\n *  selected by the jQuery selector.\n */\njQ.fn.prependFusionCharts = function (options) {\n    options.insertMode = 'prepend';\n    return renderFusionCharts(this, options);\n};\n\n/**\n * @id: jQuery.fn.attrFusionCharts\n * @id: $.fn.attrFusionCharts\n *\n * @param {object|string} attr, If this is a string then it contains\n * the FusionCharts object's attribute that needs to be set or fetched.\n * If it is an object then, it contains the attributes along with the\n * corresponding values that need to be set on the FusionCharts object\n *\n * @param {string} attrVal, To be used if attr is a string. Contains the\n * value that needs to be set for the attribute that attr corresponds to.\n *\n *  Used to set or get the attribute(s) of the FusionCharts object.\n */\njQ.fn.attrFusionCharts = function (attr, attrVal) {\n\n    /**\n     * @ignore\n     * @todo Remove ignore\n     *\n     * @var {jQuery} chartsObjects stores the FusionCharts objects in\n     * the selected HTML elements.\n     * @var {object} transfer Holds all atttributes to be returned to the\n     * callee Function.\n     */\n    var transfer = [],\n        chartObjects = getChartObjectsFromSelection(this);\n\n    if (attrVal !== undefined) {\n        // Set the charts attribute attr with value attrVal.\n\n        chartObjects.each(function () {\n            this.FusionCharts.setChartAttribute(attr, attrVal);\n        });\n        return this;\n    }\n    if (typeof attr === 'object') {\n            // Set the charts attributes, in the passed object's keys with\n            // the corresponding values.\n\n        chartObjects.each(function () {\n            this.FusionCharts.setChartAttribute(attr);\n        });\n        return this;\n    }\n\n    // If both the above cases fail, user is trying to, in accordance with the\n    // jQuery paradigm, get the value of the arrtibute.\n    chartObjects.each(function () {\n        transfer.push(\n            this.FusionCharts.getChartAttribute(attr)\n        );\n    });\n    return transfer;\n};\n\n/**\n * @id jQuery.fn.updateFusionCharts\n * @id $.fn.updateFusionCharts\n *\n * @param {object} options Contains the new options that the FusionCharts\n * objects need to update themselves with. Currently, using this interface\n * the dataType, data, width, height, debugMode and swfUrl can be updated.\n */\njQ.fn.updateFusionCharts = function (options) {\n\n    var filterOpts = {},\n        chartObjects = getChartObjectsFromSelection(this),\n        updateOptions = [\n            ['swfUrl', false],\n            ['type', false],\n            ['height', false],\n            ['width', false],\n            ['containerBackgroundColor', true],\n            ['containerBackgroundAlpha', true],\n            ['dataFormat', false],\n            ['dataSource', false]\n        ],\n        i,\n        l,\n        fcChart,\n        renderFlag,\n        optStr,\n        newChart;\n\n    for (i = 0, l = updateOptions.length; i < l; i += 1) {\n        optStr = updateOptions[i][0];\n        filterOpts.type = filterOpts.type || filterOpts.swfUrl;\n        if (options[optStr]) {\n            if (updateOptions[i][1]) {\n                renderFlag = true;\n            }\n            filterOpts[optStr] = options[optStr];\n        }\n    }\n\n    chartObjects.each(function () {\n        // If height and width are given then resize the chart first.\n        fcChart = this.FusionCharts;\n        if (renderFlag) {\n            newChart = fcChart.clone(filterOpts);\n            newChart.render();\n            return;\n        }\n\n        if (filterOpts.dataSource !== undefined || filterOpts.dataFormat !== undefined) {\n            if (filterOpts.dataSource === undefined) {\n                fcChart.setChartData(fcChart.args.dataSource, filterOpts.dataFormat);\n            } else if (filterOpts.dataFormat === undefined) {\n                fcChart.setChartData(filterOpts.dataSource, fcChart.args.dataFormat);\n            } else {\n                fcChart.setChartData(filterOpts.dataSource, filterOpts.dataFormat);\n            }\n        }\n        if (filterOpts.width !== undefined || filterOpts.height !== undefined) {\n            fcChart.resizeTo(filterOpts.width, filterOpts.height);\n        }\n        if (filterOpts.type) {\n            fcChart.chartType(filterOpts.type);\n        }\n    });\n\n    return this;\n};\n\n/**\n *  @id: jQuery.fn.cloneFusionCharts\n *  @id: $.fn.cloneFusionCharts\n *\n *  @param {object} options The options object that takes the additional\n *  parameters to be passed while cloning the FusionCharts object.\n *\n *  @param {function} callback The callback function that has to be called\n *  once the FusionCharts objects have been cloned. This function will take\n *  the new clone objects as parameter.\n *\n */\njQ.fn.cloneFusionCharts = function (callback, options) {\n\n    var transfer,\n        temp,\n        chartObjects;\n\n    // Check if the options parameter, which is not mandatory, has been\n    // passed or not. If not, that means that options is the callback function.\n    if (typeof callback !== 'function' && typeof options === 'function') {\n        temp = callback;\n        callback = options;\n        options = temp;\n    }\n\n    transfer = [];\n    chartObjects = getChartObjectsFromSelection(this);\n\n    chartObjects.each(function () {\n        transfer.push(this.FusionCharts.clone(options, {}, true));\n    });\n\n    callback.call(jQ(transfer), transfer);\n\n    return this;\n};\n\n/**\n *  @id: jQuery.fn.disposeFusionCharts\n *  @id: $.fn.disposeFusionCharts\n *\n */\njQ.fn.disposeFusionCharts = function () {\n\n    var chartObjects = getChartObjectsFromSelection(this);\n\n    chartObjects.each(function () {\n        // Execute dispose on charts.\n        this.FusionCharts.dispose();\n\n        // Remove identifier reference variable\n        delete this.FusionCharts;\n\n        // cleanup any static objects pertaining to FusionCharts.\n        if (this._fcDrillDownLevel === 0) {\n            delete this._fcDrillDownLevel;\n        }\n    });\n\n    return this;\n};\n\n/**\n * @id jQuery.fn.covertToFusionCharts\n * @id $.fn.convertToFusionCharts\n *\n * @param {object} chartOpts Configuration options to generate FusionCharts.\n * See documentation to get the list.\n *\n * @param {object} convertOpts Configuration options to convert the table\n * into a FusionCharts object.\n * See documentation to get the list.\n *\n */\njQ.fn.convertToFusionCharts = function (chartOpts, convertOpts) {\n\n    var transferObj = [];\n\n    if (typeof chartOpts.dataConfiguration === 'undefined') {\n        chartOpts.dataConfiguration = {};\n    }\n\n    jQ.extend(true, chartOpts.dataConfiguration, convertOpts);\n\n    if (!chartOpts.dataSource) {\n        chartOpts.dataSource = this.get(0);\n    }\n\n    if (!chartOpts.renderAt) {\n        this.each(function () {\n            transferObj.push(jQ('<div></div>')\n                .insertBefore(this)\n                .insertFusionCharts(chartOpts).get(0)\n            );\n        });\n    }\n    else {\n        if (typeof chartOpts.renderAt === 'string') {\n            transferObj.push(jQ('#' + chartOpts.renderAt)\n                .insertFusionCharts(chartOpts).get(0)\n            );\n        }\n        else if (typeof chartOpts.renderAt === 'object') {\n            transferObj.push(jQ(chartOpts.renderAt)\n                .insertFusionCharts(chartOpts).get(0)\n            );\n        }\n    }\n\n    return jQ(transferObj);\n};\n\n/**\n * @id jQuery.fn.drillDownFusionChartsTo\n * @id $.fn.drillDownFusionChartsTo\n *\n * Used to set multi-level configurations of linked FusionCharts objects.\n * The levels are iterated depending on the number of configuration objects\n * in a single jQuery chain.\n *\n * To set the configuration at a specific level please refer to docs.\n */\njQ.fn.drillDownFusionChartsTo = function () {\n    var chartObjects = getChartObjectsFromSelection(this),\n        j,\n        len,\n        i,\n        l,\n        configureOpts;\n\n\n    // hack to support chaining of multiple drillDowns in a single chain\n    if (typeof this._fcDrillDownLevel === 'undefined') {\n        this._fcDrillDownLevel = 0;\n    }\n\n    for (j = 0, len = arguments.length; j < len; j += 1) {\n        configureOpts = arguments[j];\n\n        if (isArray(configureOpts)) {\n            for (i = 0, l = configureOpts.length; i < l; i += 1) {\n                configureLinkedCharts(chartObjects, configureOpts[i], this._fcDrillDownLevel);\n                this._fcDrillDownLevel += 1;\n            }\n        } else {\n            configureLinkedCharts(chartObjects, configureOpts, this._fcDrillDownLevel);\n            this._fcDrillDownLevel += 1;\n        }\n    }\n    return this;\n};\n\n/**\n * @id jQuery.fn.streamFusionChartsData\n * @id $.fn.streamFusionChartsData\n *\n * @param {string} command. Contains the type of operation to be performed on\n * the realtime charts. If not provided, by default the command would be 'feed'\n * that invokes the feedData method of the chart and passes the options to it.\n *\n * @param {object} options. Contains the options that has to be parsed (if it is a js object)\n * and passed to the chart method (corresponding to command).\n * If not an object, it is passed as is to the chart method.\n *\n * @param {object} value. To make the API morph the data setter methods (setData, setDataForId),\n * it can also be passed the same parameters as the setter functions.\n *\n * @param {object} label. To make the API morph the data setter methods (setData, setDataForId),\n * it can also be passed the same parameters as the setter functions.\n**/\n\njQ.fn.streamFusionChartsData = function (command, options, value, label) {\n\n    var chartObjects = getChartObjectsFromSelection(this),\n        transfer = [],\n        fcChart,\n        method,\n        params;\n\n    // Convert the command to lower case and fetch the proper chart method name.\n    method = realtimeCommandMap[command && command.toLowerCase()];\n\n    // Check if the command provided is valid or not.\n    if (method === undefined) {\n        // this means the command is not a getter. which in turn means that\n        // the command is a data stream string and has to be handled accordingly.\n        if (arguments.length === 1) {\n            params = [command];\n            method = realtimeCommandMap.feed;\n        }\n        else {\n            return this;\n        }\n    }\n    else if (arguments.length === 1) {\n        // command is to invoke a method without any parameters..\n        params = [];\n    }\n    else {\n        // optionsParser returns an array of parameters to be passed to the\n        // chart method.\n        params = optionsParser[method](options, value, label);\n    }\n\n    if (method === 'getData' || method === 'getDataForId') {\n        chartObjects.each(function () {\n            fcChart = this.FusionCharts;\n            if (typeof fcChart[method] === 'function') {\n                transfer.push(fcChart[method].apply(fcChart, params));\n            }\n        });\n        return transfer;\n    }\n    else {\n        chartObjects.each(function () {\n            fcChart = this.FusionCharts;\n            if (typeof fcChart[method] === 'function') {\n                fcChart[method].apply(fcChart, params);\n            }\n        });\n        return this;\n    }\n};\n\njQ.extend(jQ.expr[':'], {\n    /**\n     *  Extending the jQuery selector to select all object/embed elements that\n     *  have been created using the FusionCharts constructor i.e that are an\n     *  instance of FusionCharts.\n     *\n     *  @param {object} obj, Is the HTML element that is currently being\n     *  checked.\n     */\n    FusionCharts: function (obj) {\n        return (obj.FusionCharts instanceof FusionCharts);\n    }\n});\n// }\n\n\n// WEBPACK FOOTER //\n// ./src/jquery-fusioncharts.js","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fusioncharts\"\n// module id = 1\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jquery\"\n// module id = 2\n// module chunks = 0","var win = window,\n    doc = win.document,\n    objectToStringFn = Object.prototype.toString,\n    merge = function (obj1, obj2) {\n        var item, str;\n        //check whether obj2 is an array\n        //if array then iterate through it's index\n        //**** MOOTOOLS precution\n        if (obj2 instanceof Array) {\n            for (item = 0; item < obj2.length; item += 1) {\n                if (typeof obj2[item] !== 'object') {\n                    obj1[item] = obj2[item];\n                } else {\n                    if (typeof obj1[item] !== 'object') {\n                        obj1[item] = obj2[item] instanceof Array ? [] : {};\n                    }\n                    merge(obj1[item], obj2[item]);\n                }\n            }\n        }\n        else {\n            for (item in obj2) {\n                if (typeof obj2[item] === 'object') {\n                    str = objectToStringFn.call(obj2[item]);\n                    if (str === '[object Object]') {\n                        if (typeof obj1[item] !== 'object') {\n                            obj1[item] = {};\n                        }\n                        merge(obj1[item], obj2[item]);\n                    }\n                    else if (str === '[object Array]') {\n                        if (!(obj1[item] instanceof Array)) {\n                            obj1[item] = [];\n                        }\n                        merge(obj1[item], obj2[item]);\n                    }\n                    else {\n                        obj1[item] = obj2[item];\n                    }\n                }\n                else {\n                    obj1[item] = obj2[item];\n                }\n            }\n        }\n        return obj1;\n    },\n    extend = function (sink, source, proto, deep) {\n        var item;\n        // When 'proto' is marked as true, the methods and properties\n        // of source is not added to the prototype of the sink.\n        if (proto && sink.prototype) {\n            sink = sink.prototype;\n        }\n\n        // If deep extend is specified, then we use the deep copy function\n        // 'merge'\n        if (deep === true) {\n            merge(sink, source);\n        }\n        // Copy all methods and properties of the object passed in parameter\n        // to the object to which this function is attached.\n        else {\n            for (item in source) {\n                sink[item] = source[item];\n            }\n        }\n\n        return sink;\n    },\n    /**\n     *  Used to remove all textNodes in an array of nodes. Textnodes get created\n     *  inadvertently, when the table HTML has newline and space. Returns an\n     *  array of nodes that is not an HTMLCollection and has only the non-text\n     *  nodes in it.\n     *\n     *  @param {array} nodeArr Contains the array of nodes that have to be\n     *  sanitized.\n     */\n    sanitizeNodesArray = function (nodeArr) {\n        var l, i, sanitizedArr = [];\n        for (i = 0, l = nodeArr.length; i < l; i += 1) {\n            // if nodeType != 3 then the node is not a text node.\n            if (nodeArr[i].nodeType !== 3) {\n                sanitizedArr.push(nodeArr[i]);\n            }\n        }\n        return sanitizedArr;\n    },\n\n\n    /**\n     * Used to merge two JSON objects. The copy is a deep copy and not a\n     * reference copy.\n     *\n     * @param: {object} srcJSON, the source json.\n     *\n     * @param: {object} targetJSON, that json that needs to be merged with the\n     * source json.\n     *\n     */\n    mergeJSON = function (srcJSON, targetJSON) {\n        var i,\n            len,\n            item;\n\n        if (targetJSON instanceof Array) {\n            for (i = 0, len = targetJSON.length; i < len; i++) {\n                if (targetJSON[i] instanceof Array) {\n                    if (srcJSON[i] === undefined) {\n                        srcJSON[i] = [];\n                    }\n                    mergeJSON(srcJSON[i], targetJSON[i]);\n                } else if (typeof targetJSON[i] === 'object') {\n                    if (typeof srcJSON[i] === 'undefined') {\n                        srcJSON[i] = {};\n                    }\n                    mergeJSON(srcJSON[i], targetJSON[i]);\n                } else {\n                    srcJSON[i] = targetJSON[i];\n                }\n            }\n        } else if (typeof targetJSON === 'object') {\n            for (item in targetJSON) {\n                if (typeof srcJSON[item] === 'undefined') {\n                    if (targetJSON[item] instanceof Array) {\n                        srcJSON[item] = [];\n                        mergeJSON(srcJSON[item], targetJSON[item]);\n                    } else if (typeof srcJSON[item] === 'object') {\n                        srcJSON[i] = {};\n                        mergeJSON(srcJSON[i], targetJSON[i]);\n                    } else {\n                        srcJSON[i] = targetJSON[i];\n                    }\n                }\n            }\n        }\n\n        return srcJSON;\n    },\n\n    /**\n     *  Returns the <tbody> element of the table. In order to support W3C\n     *  non-compliant HTML, wherein the table does not have a <tbody> containing\n     *  the <tr> & <td> elements, the table itself is returned.\n     *\n     *  @param {object} tbl Is the table whose tbody needs to fetched.\n     *\n     */\n    getTbody = function (tbl) {\n        var tbodyArr = sanitizeNodesArray(tbl.childNodes);\n\n        // Checking if the table's childNode is a tbody or not\n        if (tbodyArr.length) {\n            if (tbodyArr[0].nodeName === 'TBODY') {\n                return tbodyArr[0];\n            }\n            else if (tbodyArr[0].nodeName === 'THEAD' && tbodyArr[1] && tbodyArr[1].nodeName === 'TBODY') {\n                return tbodyArr[1];\n            }\n        }\n        return tbl;\n    },\n\n    /**\n     *  Returns an array containing the <td> in the <thead> tag.\n     *\n     *  @param {object} tbl Is the table whose tbody needs to fetched.\n     *\n     */\n    getThead = function (tbl) {\n        var tbodyArr = sanitizeNodesArray(tbl.childNodes);\n\n        // Checking if the table's childNode is a tbody or not\n        if (tbodyArr.length) {\n            if (tbodyArr[0].nodeName === 'THEAD' && tbodyArr[1] && tbodyArr[1].nodeName === 'TBODY') {\n                return tbodyArr[0].childNodes;\n            }\n        }\n        return [];\n    },\n\n    /**\n     *  Used to return the text in a given Element. Needed as firefox does not\n     *  support 'innerText', which is a W3C standard and instead uses\n     *  textContent attribute to store the text.\n     *\n     *  @param {object} nodeEle The HTML element whose text is needed.\n     */\n    getTextFromNode = function (nodeEle) {\n        return (nodeEle.innerText !== undefined) ? nodeEle.innerText : nodeEle.textContent;\n    },\n\n    /**\n     *  Used to convert an array of rows into an array of corresponding columns.\n     *\n     *  @param {array} rowArr The array of table rows that has to be transposed\n     *  into an array of columns.\n     */\n    getColumnArr = function (rowArr) {\n\n        var i,\n            j,\n            l,\n            len,\n            cellArr,\n            rowSpanInc,\n            colSpan = 1,\n            columnArrIdx,\n            rowSpan = {},\n            returnObj = [];\n\n        for (i = 0, l = rowArr.length; i < l; i += 1) {\n\n            // get all the cells of the row\n            cellArr = sanitizeNodesArray(rowArr[i].childNodes);\n            colSpan = 1;\n            rowSpanInc = 0;\n            for (j = 0, len = cellArr.length; j < len; j += 1) {\n\n                // if a previous row had a cell with a rowspan then this\n                // rowspan needs to be taken into account while creating\n                // column array.\n                columnArrIdx = j + colSpan + rowSpanInc - 1;\n                if (rowSpan[columnArrIdx] &&\n                        ((i - rowSpan[columnArrIdx].rowNum) < rowSpan[columnArrIdx].row)) {\n                    rowSpanInc += rowSpan[columnArrIdx].col;\n                    columnArrIdx += rowSpan[columnArrIdx].col;\n                }\n\n                if (parseInt(cellArr[j].getAttribute('rowspan'), 10) > 1) {\n                    if (!rowSpan[columnArrIdx]) {\n                        rowSpan[columnArrIdx] = {};\n                    }\n                    rowSpan[columnArrIdx].rowNum = i;\n                    rowSpan[columnArrIdx].row = parseInt(cellArr[j].getAttribute('rowspan'), 10);\n                    // If the cell has both a rowspan and a colspan then they\n                    // both need to be taken into consideration while calculating\n                    // the column of cells in the susequent rows\n                    if (parseInt(cellArr[j].getAttribute('colspan'), 10) > 1) {\n                        rowSpan[columnArrIdx].col = parseInt(cellArr[j].getAttribute('colspan'), 10);\n                    } else {\n                        rowSpan[columnArrIdx].col = 1;\n                    }\n                }\n\n                // The previous cells colspan, and the previous rows rowspans\n                // also needs to be added to the current cells index to get the\n                // proper column index.\n                while (returnObj.length <= columnArrIdx) {\n                    returnObj.push({childNodes: []});\n                }\n                returnObj[columnArrIdx].childNodes.push(cellArr[j]);\n\n                // Adding the current cells colspan for subsequent cells in the\n                // current row.\n                if (parseInt(cellArr[j].getAttribute('colspan'), 10) > 1) {\n                    colSpan += parseInt(cellArr[j].getAttribute('colspan'), 10) - 1;\n                }\n            }\n        }\n\n        return returnObj;\n    },\n\n    /**\n     * Used to check if an item is present in an array or not.\n     *\n     * @param {array} arr The array which has to be checked\n     *\n     * @param {string|number|object} item The item which needs be checked if\n     * present in array arr or not.\n     */\n    arrayContains = function (arr, item) {\n        var i = arr.length;\n        // Using a decrementing while loop (optimization) since the order in which the\n        // array is traversed doesn't matter.\n        while (i) {\n            i -= 1;\n            if (arr[i] === item) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /**\n     * Used to check if a particular row or column has all non numeric (or blank)\n     * content. If so, then that particular row/column must be ignored.\n     *\n     * @param {array} nodeArr Is an array of all the rows/columns of the table.\n     *\n     * @param {number} index of the row/column that is not to be analysed as it\n     * has already been set aside as the label row/column.\n     *\n     * @param {number} j is the cell index at which we have to check for the\n     * presence of numeric data in all the other rows and columns.\n     */\n\n    checkData = function (nodeArr, j, index) {\n\n        var i,\n            l,\n            childArr = sanitizeNodesArray(nodeArr[j].childNodes),\n            text;\n\n        for (i = 0, l = childArr.length; i < l; i += 1) {\n            if (i !== index) {\n                text = getTextFromNode(childArr[i]);\n                if (parseFloat(text) === text) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    _blankString = '__fcBLANK__',\n    _blankNo = 0,\n    /**\n     * Used to get the table row that has the labels (categories or legend) and\n     * extract the label details from the corresponding row.\n     *\n     * @param {array} nodeArr Is an array of all the rows/columns of the table.\n     *\n     * @param {array} ignoreArr Is an array of all the indexes in the nodeArr\n     * that need to be ignored. The items of this array can be negative as well.\n     *\n     * @param {string} index If the label row/column details have been given by\n     * the user then this will contain the index which has the labels.\n     *\n     */\n    getLabels = function (nodeArr, ignoreArr, index, opts) {\n\n        var len, l, i, j, childArr, mostEmptyCellRow = null, internalLabel = [],\n            emptyCellCount = [], textCellCount = 0, temp, returnObj = {},\n            spanTotal = 0, spanLen, isRowLabel, maxIdx, spanLength, totalSpanLength = 0, tLabels;\n\n\n        if (typeof index === 'undefined') {\n        // Checking if the user has provided the index. If index has not been\n        // passed then we assume that the user does not want to give a label row\n        // or column.\n\n            // Creating custom labels for all cells in the first row/column.\n            childArr = sanitizeNodesArray(nodeArr[0].childNodes);\n            for (j = 0, len = childArr.length; j < len; j += 1) {\n                spanLen = j + spanTotal;\n                internalLabel[spanLen] = _blankString + (spanLen + 1);\n\n                temp = parseInt(childArr[j].colSpan, 10);\n                temp = (temp > 1) ? temp : parseInt(childArr[j].rowSpan, 10);\n                if (temp > 1) {\n                    for (l = 1; l < temp; l += 1) {\n                        internalLabel[spanLen + l] = _blankString + (spanLen + l + 1);\n                    }\n                    spanTotal += (temp - 1);\n                }\n            }\n\n            // Deleting the labels for the rows/columns that the user wants to\n            // ignore.\n            for (i = 0, l = (j + spanTotal), len = ignoreArr.length; i < len; i += 1) {\n                if (ignoreArr[i] > 0) {\n                    delete internalLabel[ignoreArr[i] - 1];\n                } else {\n                    delete internalLabel[l + ignoreArr[i]];\n                }\n            }\n\n            return {'index': -1, 'labelObj': internalLabel};\n\n        } else if (index === 0) {\n            // Checking if the user has provided the index. Since we expect row/column\n            // indices starting from 1, if index is 0 then we use our internal logic\n            // to find the label array from the given nodeArr.\n            for (i = 0, l = nodeArr.length; i < l; i += 1) {\n                childArr = sanitizeNodesArray(nodeArr[i].childNodes);\n                emptyCellCount[i] = 0;\n                textCellCount = 0;\n\n                if(opts && opts._extractByHeaderTag){\n                    for (j = 0, len = childArr.length; j < len; j += 1) {\n                        if(childArr[j].nodeName.toLowerCase() != 'th'){\n                            continue;\n                        }\n                        tLabels = getLabels(nodeArr, ignoreArr, i + 1);\n                        delete tLabels.labelObj[opts._rowLabelIndex];\n                        return tLabels;\n                    }\n                }else{\n                    for (j = 0, len = childArr.length; j < len; j += 1) {\n                        if (arrayContains(ignoreArr, (j + 1)) ||\n                                arrayContains(ignoreArr, (j - len))) {\n                            continue;\n                        }\n                        temp = getTextFromNode(childArr[j]);\n                        // Checking if the cell is emtpy.\n                        if (temp.replace(/^\\s*/, '').replace(/\\s*$/, '') === '') {\n                            emptyCellCount[i] += 1;\n                            continue;\n                        }\n                        // Checking if the cell has a non-number content\n                        if (parseFloat(temp) != temp) {\n                            textCellCount += 1;\n                            // If there are at least 2 cells that have non-number\n                            // content then we assume that they contain labels and\n                            // fetch the labels from this array of nodes.\n                            if (textCellCount > 1) {\n                                return getLabels(nodeArr, ignoreArr, i + 1);\n                            }\n                        }\n                    }\n                }\n                // If there are empty cells then we assume that the array with\n                // the most number of empty cells must be the label array.\n                if (i > 0) {\n                    if (emptyCellCount[i - 1] > emptyCellCount[i]) {\n                        mostEmptyCellRow = i - 1;\n                    } else if (emptyCellCount[i - 1] < emptyCellCount[i]) {\n                        mostEmptyCellRow = i;\n                    }\n                }\n            }\n            if (mostEmptyCellRow !== null) {\n                return getLabels(nodeArr, ignoreArr, mostEmptyCellRow + 1);\n            } else {\n                return getLabels(nodeArr, ignoreArr);\n            }\n        }\n\n        // If this is a negative number then, calulate the index from the\n        // end of the table. e.g -1 would imply the last row.\n        if (index < 0) {\n            index += nodeArr.length;\n        } else if (index > 0) {\n            index -= 1;\n        }\n\n        /**\n         * Once we have the index of the row/column that contains the labels we\n         * go through only that row/column and extract the labels.\n         */\n        childArr = sanitizeNodesArray(nodeArr[index].childNodes);\n\n        isRowLabel = (nodeArr[0].nodeType !== undefined) ? true : false;\n        for (j = 0, len = childArr.length; j < len; j += 1) {\n            spanLength = 0;\n            if (isRowLabel) {\n                if (childArr[j].colSpan !== '1') {\n                    spanLength = parseInt(childArr[j].colSpan, 10);\n                }\n            } else if (childArr[j].rowSpan !== '1') {\n                spanLength = parseInt(childArr[j].rowSpan, 10);\n            }\n            spanLength = (spanLength > 1) ? spanLength : 0;\n            temp = getTextFromNode(childArr[j]);\n            if (temp.replace(/^\\s*/, '').replace(/\\s*$/, '') !== '') {\n                returnObj[j + totalSpanLength] = temp;\n            } else if (checkData(getColumnArr(nodeArr), j, index)) {\n                // if the label text is missing in one of the cells of the labels\n                // row/column we check for the presence of numeric data in other\n                // cells of the corresponding column/row.\n\n                returnObj[j + totalSpanLength] = _blankString + _blankNo;\n                _blankNo += 1;\n            }\n\n            if (spanLength > 1) {\n                // If the spanLength > 1, then we create additional labels for\n                // rows/columns pertaining to the rowspan or colspan.\n                temp = returnObj[j + totalSpanLength];\n                for (i = 1; i < spanLength; i += 1) {\n                    returnObj[j + totalSpanLength + i] = temp + ' (' + i + ')';\n                }\n\n                // totalSpanLength is used to adjust the indices of the\n                // subsequent cells using the rowspan/colspan of the current\n                // cell.\n                totalSpanLength += (spanLength - 1);\n            }\n        }\n\n        // Deleting the rows/columns that the user wants to ignore.\n        maxIdx = len + totalSpanLength;\n        for (i = 0, len = ignoreArr.length; i < len; i += 1) {\n            if (ignoreArr[i] > 0) {\n                delete returnObj[ignoreArr[i] - 1];\n            } else {\n                delete returnObj[maxIdx + ignoreArr[i]];\n            }\n        }\n\n        return {'labelObj': returnObj, 'index': index};\n    },\n\n    extractDataFromTable = function (tbl, opts) {\n\n        if (typeof tbl === 'string') {\n            tbl = doc.getElementById(tbl);\n        }\n\n        if ((typeof win.jQuery !== 'undefined') && (tbl instanceof win.jQuery)) { // jshint ignore: line\n            tbl = tbl.get(0);\n        }\n\n        if (!tbl) {\n            return {data: null};\n        }\n\n        if (opts.hideTable) {\n            tbl.style.display = 'none';\n        }\n\n        var i,\n            j,\n            rowCells,\n            cellText,\n            dataMap = {},\n            mapColumnIdx,\n            columnSpan,\n            len,\n            item,\n            rowSpan,\n            cellEle,\n            columnSpanObj = {},\n            rowSpanObj = {},\n            tableRows = sanitizeNodesArray(getThead(tbl)).concat(sanitizeNodesArray(getTbody(tbl).childNodes)),\n            l = tableRows.length,\n            dataRows = 0,\n            dataColumns = 0,\n            tempColumn = 0,\n            rowLabelMap,\n            m,\n            k = 0,\n            columnLabelMap,\n            isSingleSeries = false,\n            chartType = opts.chartType,\n            tempMap,\n\n            singleSeriesCharts = ['column2d', 'column3d', 'pie3d', 'pie2d',\n                'line', 'bar2d', 'area2d', 'doughnut2d',\n                'doughnut3d', 'pareto2d', 'pareto3d'];\n\n\n        if(singleSeriesCharts.indexOf(chartType) !== -1){\n            isSingleSeries = true;\n        }\n\n\n\n        // use rowLabelSource and colLabelSource to avoid confusion\n        opts.rowLabelSource = parseInt(opts.labelSource, 10);\n        opts.colLabelSource = parseInt(opts.legendSource, 10);\n        // Create the labels objects for the chart.\n\n        if (opts.major === 'column') {\n            rowLabelMap = opts.useLabels ?\n                getLabels(tableRows, opts.ignoreCols, opts.rowLabelSource) :\n                getLabels(tableRows, opts.ignoreCols);\n\n            columnLabelMap = opts.useLegend ?\n                getLabels(getColumnArr(tableRows), opts.ignoreRows, opts.colLabelSource) :\n                getLabels(getColumnArr(tableRows), opts.ignoreRows);\n        }else{\n            tempMap = getLabels(getColumnArr(tableRows), opts.ignoreRows, opts.rowLabelSource);\n            if(!opts.useLabels){\n                rowLabelMap = getLabels(getColumnArr(tableRows), opts.ignoreRows);\n            }else{\n                rowLabelMap = tempMap;\n            }\n\n            opts._rowLabelIndex = tempMap.index;\n            opts._extractByHeaderTag = true;\n\n            columnLabelMap = opts.useLegend ?\n                getLabels(tableRows, opts.ignoreCols, opts.colLabelSource, opts) :\n                getLabels(tableRows, opts.ignoreCols);\n\n            delete opts._extractByHeaderTag;\n\n            tempMap = rowLabelMap;\n            rowLabelMap = columnLabelMap;\n            columnLabelMap = tempMap;\n        }\n\n        delete rowLabelMap.labelObj[columnLabelMap.index];\n        delete columnLabelMap.labelObj[rowLabelMap.index];\n\n        // Creating the 2d map depending on whether the rows are the primary\n        // keys or the columns.\n        if (opts.major === 'row') {\n            for (item in columnLabelMap.labelObj) {\n                dataMap[item] = {};\n            }\n        } else {\n            for (item in rowLabelMap.labelObj) {\n                dataMap[item] = {};\n            }\n        }\n\n        // Populating the dataMap.\n        for (i = 0; i < l; i += 1) {\n            if (rowLabelMap.index === i ||\n                    (columnLabelMap.labelObj[i] === undefined)) {\n                continue;\n            }\n\n            dataRows += 1;\n            rowCells = sanitizeNodesArray(tableRows[i].childNodes);\n\n            // columnSpanObj maintains the number of colspans in the current\n            // row.\n            // rowSpanObj maintains the number of rowspans in a rows x columns\n            // map.\n            columnSpanObj[i] = 0;\n            rowSpanObj[i] = {};\n\n            for (j = 0, len = rowCells.length; j < len; j += 1) {\n\n                cellEle = rowCells[j];\n\n                columnSpan = parseInt(cellEle.getAttribute('colspan'), 10);\n                rowSpan = parseInt(cellEle.getAttribute('rowspan'), 10);\n\n                mapColumnIdx = j + columnSpanObj[i];\n\n                // Calculating the position of the current cell in the dataMap.\n                while (k < i) {\n                    if (rowSpanObj[k]) {\n                        for (m in rowSpanObj[k]) {\n                            if (m > mapColumnIdx) {\n                                break;\n                            }\n\n                            if ((i - k) <= rowSpanObj[k][m].row) {\n                                mapColumnIdx += rowSpanObj[k][m].col;\n                            }\n                        }\n                    }\n                    k += 1;\n                }\n\n                if (columnSpan > 1) {\n                    columnSpanObj[i] += (columnSpan - 1);\n                }\n\n                if (rowSpan > 1) {\n                    if (columnSpan > 1) {\n                        rowSpanObj[i][mapColumnIdx] = {\n                            row: (rowSpan - 1),\n                            col: columnSpan\n                        };\n                    } else {\n                        rowSpanObj[i][mapColumnIdx] = {\n                            row: (rowSpan - 1),\n                            col: 1\n                        };\n                    }\n                }\n                if (columnLabelMap.index === mapColumnIdx ||\n                    (rowLabelMap.labelObj[mapColumnIdx] === undefined)) {\n\n                    continue;\n                }\n\n                tempColumn += 1;\n                cellText = getTextFromNode(cellEle);\n                // If the cell does not have any text then we covert it by\n                // default to 0 or to an parameterized option set by user.\n                if (cellText.replace(/^\\s*/, '').replace(/\\s*$/, '') === '') {\n                    if (opts.convertBlankTo) {\n                        cellText = opts.convertBlankTo;\n                    } else {\n                        continue;\n                    }\n                }\n\n                // Filling up the dataMap based on the rowspan, colspan and\n                // position(row=i, column=mapColumnIdx) information of the\n                // table cell.\n                columnSpan = (columnSpan > 1) ? columnSpan : 1;\n                rowSpan = (rowSpan > 1) ? rowSpan : 1;\n\n                if (opts.major === 'row') {\n                    k = 0;\n                    while (k < columnSpan) {\n                        m = 0;\n                        while (m < rowSpan) {\n                            dataMap[i + m][mapColumnIdx + k] = parseFloat(cellText);\n                            m += 1;\n                        }\n                        k += 1;\n                    }\n                }\n                else {\n                    k = 0;\n                    while (k < columnSpan) {\n                        m = 0;\n                        while (m < rowSpan) {\n                            dataMap[mapColumnIdx + k][i + m] = parseFloat(cellText);\n                            m += 1;\n                        }\n                        k += 1;\n                    }\n                }\n            }\n            if (tempColumn > dataColumns) {\n                dataColumns = tempColumn;\n            }\n        }\n\n        return {\n            data: dataMap,\n            chartType: chartType ? (!isSingleSeries ? 'multi' : 'single') :\n                ((dataRows > 1 && dataColumns > 1) ? 'multi' : 'single'),\n            labelMap: columnLabelMap,\n            legendMap: rowLabelMap\n        };\n    },\n\n    createChartFromTable = function (data, obj) {\n\n        // Default configuration for HTMLTable data-handler\n        var opts = {\n                chartAttributes: { },\n                major: 'row',\n                useLabels: true,\n                useLegend: true,\n                labelSource: 0,\n                legendSource: 0,\n                ignoreCols: [],\n                ignoreRows: [],\n                showLabels: true,\n                showLegend: true,\n                seriesColors: [],\n                convertBlankTo: '0',\n                hideTable: false,\n                chartType: obj.chartType && obj.chartType(),\n\n                // Private Variables\n                labels: [],\n                legend: [],\n                data: []\n            }, config = obj.args.dataConfiguration || {},\n            i, item1, item2, categoryArr, datasetArr, chartJSON = {},\n            datasets = {}, dataObj, dataMap, labelMap, legendMap;\n\n        extend(opts, config);\n\n        dataObj = extractDataFromTable(data, opts);\n        dataMap = dataObj.data;\n\n        if (opts.major !== 'row') {\n            labelMap = dataObj.legendMap,\n            legendMap = dataObj.labelMap;\n        } else {\n            labelMap = dataObj.labelMap,\n            legendMap = dataObj.legendMap;\n        }\n\n        // chartAttributes should contain the configuration attributes for the chart\n        // e.g caption, xAxisName, yAxisName etc.\n        chartJSON.chart = extend({}, opts.chartAttributes);\n\n        if (dataObj.chartType === 'multi') {\n            chartJSON.categories = [{'category': []}];\n            chartJSON.dataset = [];\n\n            categoryArr = chartJSON.categories[0].category;\n            datasetArr = chartJSON.dataset;\n\n            i = 0;\n            for (item1 in dataMap) {\n\n                if (opts.showLabels === true) {\n                    // If the user has provided custom labels then those should be\n                    // shown instead of the extracted labels.\n                    categoryArr.push(extend({\n                        label: (labelMap.labelObj[item1].indexOf(_blankString) != -1) ?\n                            '' : labelMap.labelObj[item1]\n                    },\n                    opts.labels[i]));\n                } else {\n                    categoryArr.push({'label': ''});\n                }\n                i += 1;\n                for (item2 in dataMap[item1]) {\n                    if (typeof datasets[item2] === 'undefined') {\n                        datasets[item2] = [];\n                    }\n                    datasets[item2].push({'value': dataMap[item1][item2]});\n                }\n            }\n\n            i = 0;\n            for (item1 in datasets) {\n                if (opts.showLegend === true) {\n                    // If the user has provided custom labels then those should be\n                    // shown instead of the extracted labels.\n                    datasetArr.push(extend({\n                        'seriesname': ((legendMap.labelObj[item1].indexOf(_blankString) !== -1) ?\n                            '' : legendMap.labelObj[item1]),\n                        'data': datasets[item1]\n                    }, opts.legend[i]));\n                } else {\n                    datasetArr.push({\n                        'seriesname': '',\n                        'data': datasets[item1]\n                    });\n                }\n                i += 1;\n            }\n        } else if (dataObj.chartType === 'single') {\n            chartJSON.data = [];\n            datasetArr = chartJSON.data;\n\n            i = 0;\n            if (opts.showLabels) {\n                for (item1 in dataMap) {\n                    for (item2 in dataMap[item1]) {\n                        datasetArr.push(extend({\n                            label: ((labelMap.labelObj[item1].indexOf(_blankString) !== -1) ?\n                            '' : labelMap.labelObj[item1]),\n                            value: dataMap[item1][item2]\n                        }, opts.labels[i]));\n\n                        i += 1;\n                    }\n                }\n            } else {\n                for (item1 in dataMap) {\n                    for (item2 in dataMap[item1]) {\n                        datasetArr.push({'value': dataMap[item1][item2]});\n                    }\n                }\n            }\n        }\n\n        return {\n            data: chartJSON,\n            error: undefined\n        };\n    },\n    htmlTableToJSON = function (data, obj) {\n        return createChartFromTable(data, obj);\n    };\n\n/**\n * method to set the HTML table data\n * @param {Object} dom: HTML table dom\n */\nfunction setHTMLTableData (dom) {\n    this.setChartData(dom, 'htmltable');\n}\n/**\n * method to add functions in the fusioncharts prototype\n * @param {Function} FusionCharts is required\n * @return {Object} for extension\n */\nfunction wrapper (FusionCharts) {\n    FusionCharts && (FusionCharts.prototype.setHTMLTableData = setHTMLTableData);\n    return {\n        format: 'htmltable',\n        toJSON: htmlTableToJSON\n    };\n}\n\nmodule.exports = {\n    extension: wrapper,\n    name: 'HTMLTable',\n    type: 'transcoder',\n    requiresFusionCharts: true\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/transcoder-htmltable/transcoder-htmltable.js"],"sourceRoot":""}
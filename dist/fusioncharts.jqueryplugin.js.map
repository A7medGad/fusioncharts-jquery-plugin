{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap d223efdd11ef0abb5be5","webpack:///./src/jquery-fusioncharts.js","webpack:///external \"fusioncharts\"","webpack:///external \"jquery\"","webpack:///./src/transcoder-htmltable/transcoder-htmltable.js"],"names":["FusionCharts","require","jQuery","HTMLTableTranscoder","win","window","addDep","doc","document","jQ","renderFusionCharts","captureAllFusionChartsEvents","getChartObjectsFromSelection","configureLinkedCharts","math","Math","mathMin","min","isArray","Array","objectToStringFn","Object","prototype","toString","arrayToStringResult","call","subject","realtimeCommandMap","feed","setdata","setdataforid","getdata","getdataforid","clear","stop","start","optionsParser","feedData","options","stream","getData","isNaN","index","getDataForId","id","setData","value","label","arr","push","setDataForId","clearChart","stopUpdate","restartUpdate","elemList","chartOptions","i","l","cO","chartObj","scriptElement","length","parentNode","render","extend","renderAt","delayedRender","createElement","setAttribute","test","navigator","userAgent","opera","text","appendChild","createTextNode","eve","args","containerElement","event","Event","eventType","sender","containerElementId","trigger","addEventListener","obj","filter","add","find","chartObjects","linkConfigObj","level","each","configureLink","fn","insertFusionCharts","appendFusionCharts","insertMode","prependFusionCharts","attrFusionCharts","attr","attrVal","transfer","undefined","setChartAttribute","getChartAttribute","updateFusionCharts","filterOpts","updateOptions","fcChart","renderFlag","optStr","newChart","type","swfUrl","clone","dataSource","dataFormat","setChartData","width","height","resizeTo","chartType","cloneFusionCharts","callback","temp","disposeFusionCharts","dispose","_fcDrillDownLevel","convertToFusionCharts","chartOpts","convertOpts","transferObj","dataConfiguration","get","insertBefore","drillDownFusionChartsTo","j","len","configureOpts","arguments","streamFusionChartsData","command","method","params","toLowerCase","apply","expr","merge","obj1","obj2","item","str","sink","source","proto","deep","sanitizeNodesArray","nodeArr","sanitizedArr","nodeType","mergeJSON","srcJSON","targetJSON","getTbody","tbl","tbodyArr","childNodes","nodeName","getThead","getTextFromNode","nodeEle","innerText","textContent","getColumnArr","rowArr","cellArr","rowSpanInc","colSpan","columnArrIdx","rowSpan","returnObj","rowNum","row","col","parseInt","getAttribute","arrayContains","checkData","childArr","parseFloat","_blankString","_blankNo","getLabels","ignoreArr","opts","mostEmptyCellRow","internalLabel","emptyCellCount","textCellCount","spanTotal","spanLen","isRowLabel","maxIdx","spanLength","totalSpanLength","tLabels","_extractByHeaderTag","labelObj","_rowLabelIndex","replace","extractDataFromTable","getElementById","data","hideTable","style","display","rowCells","cellText","dataMap","mapColumnIdx","columnSpan","cellEle","columnSpanObj","rowSpanObj","tableRows","concat","dataRows","dataColumns","tempColumn","rowLabelMap","m","k","columnLabelMap","isSingleSeries","tempMap","singleSeriesCharts","indexOf","rowLabelSource","labelSource","colLabelSource","legendSource","major","useLabels","ignoreCols","useLegend","ignoreRows","convertBlankTo","labelMap","legendMap","createChartFromTable","chartAttributes","showLabels","showLegend","seriesColors","labels","legend","config","item1","item2","categoryArr","datasetArr","chartJSON","datasets","dataObj","chart","categories","dataset","category","error","htmlTableToJSON","setHTMLTableData","dom","wrapper","format","toJSON","module","exports","extension","name","requiresFusionCharts"],"mappings":"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","file":"fusioncharts.jqueryplugin.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"fusioncharts\"), require(\"jquery\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"fusioncharts\", \"jquery\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"fusioncharts\"), require(\"jquery\")) : factory(root[\"fusioncharts\"], root[\"jquery\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d223efdd11ef0abb5be5","var FusionCharts = require('fusioncharts');\nvar jQuery = require('jquery');\nvar HTMLTableTranscoder = require('./transcoder-htmltable/transcoder-htmltable');\n\nvar win = typeof window !== 'undefined' ? window : {};\n\nif (typeof FusionCharts === 'undefined') {\n    FusionCharts = win.FusionCharts;\n}\nif (typeof jQuery === 'undefined') {\n    jQuery = win.jQuery;\n}\n\nFusionCharts.addDep(HTMLTableTranscoder);\n\nvar doc = win.document,\n    jQ = jQuery,\n    renderFusionCharts,\n    captureAllFusionChartsEvents,\n    getChartObjectsFromSelection,\n    configureLinkedCharts,\n    math = win.Math,\n    mathMin = math.min,\n    // FusionCharts = FusionCharts,\n    isArray = (function () {\n        // Use compiler's own isArray when available\n        if (Array.isArray) {\n            return Array.isArray;\n        }\n\n        // Retain references to variables for performance optimization\n        var objectToStringFn = Object.prototype.toString,\n            arrayToStringResult = objectToStringFn.call([]);\n\n        return function (subject) {\n            return objectToStringFn.call(subject) === arrayToStringResult;\n        };\n    }()),\n    realtimeCommandMap = {\n        feed: 'feedData',\n        setdata: 'setData',\n        setdataforid: 'setDataForId',\n        getdata: 'getData',\n        getdataforid: 'getDataForId',\n        clear: 'clearChart',\n        stop: 'stopUpdate',\n        start: 'restartUpdate'\n    },\n    optionsParser = {\n        feedData: function (options) {\n            if (typeof options === 'string') {\n                return [options];\n            }\n            else if (typeof options === 'object' && options.stream) {\n                return [options.stream];\n            }\n            else {\n                return false;\n            }\n        },\n        getData: function (options) {\n            // index is passed in case of multivalue charts.\n            if (!isNaN(options)) {\n                return [options];\n            }\n            else if (typeof options === 'object' && options.index) {\n                return [options.index];\n            }\n            else {\n                return [];\n            }\n        },\n        getDataForId: function (options) {\n            // index is passed in case of multivalue charts.\n            if (typeof options === 'string') {\n                return [options];\n            }\n            else if (typeof options === 'object' && options.id) {\n                return [options.id];\n            }\n            else {\n                return [];\n            }\n        },\n        setData: function (options, value, label) {\n            var arr = [];\n            if (typeof options !== 'object') {\n                arr = [options, value, label];\n            }\n            else {\n                options.value && arr.push(options.value);\n                options.label && arr.push(options.label);\n            }\n\n            return arr;\n        },\n        setDataForId: function (options, value, label) {\n            var arr = [];\n            if (typeof options === 'string' || typeof value === 'string' ||\n                    typeof label === 'string') {\n                arr = [options, value, label];\n            }\n            else if (typeof options === 'object') {\n                options.value && arr.push(options.value);\n                options.label && arr.push(options.label);\n            }\n\n            return arr;\n        },\n        clearChart: function (options) {\n            return [options];\n        },\n        stopUpdate: function (options) {\n            return [options];\n        },\n        restartUpdate: function (options) {\n            return [options];\n        }\n    };\n\n// Assign FusionCharts object to global jQuery object for easy use.\njQ.FusionCharts = FusionCharts;\n\n/**\n * Used purely for rendering the FusionCharts.\n * Acts as a common method that is invoked by all the APIs that create a\n * FusionChart object\n *\n * @param {array} elemList is a list of all the HTML elements that\n * are selected using the jQuery selectors\n *\n * @param {object} chartOptions is the options that are to be passed to\n * the FusionCharts contructor.\n */\n\nrenderFusionCharts = function (elemList, chartOptions) {\n    var i,\n        l,\n        cO,\n        chartObj,\n        scriptElement;\n\n    if (isArray(chartOptions) || chartOptions instanceof jQ) {\n        l = mathMin(elemList.length, chartOptions.length);\n    }\n    else {\n        l = elemList.length;\n    }\n\n    for (i = 0; i < l; i += 1) {\n\n        // One-to-one mapping with the HTML elements in case of\n        // multiple option objects.\n        if (isArray(chartOptions) || chartOptions instanceof jQ) {\n            cO = chartOptions[i];\n        } else {\n            cO = chartOptions;\n        }\n\n        // check if the element is appended to the window document or not.\n        if (elemList[i].parentNode) {\n            // Adding the renderAt option to the chartOptions tells the\n            // constructor where to render the FusionCharts object.\n            FusionCharts.render(jQ.extend({}, cO, {\n                renderAt: elemList[i]\n            }));\n        } else {\n            chartObj = new FusionCharts(jQ.extend({}, cO, {\n                renderAt: elemList[i]\n            }));\n\n            if (!jQ.FusionCharts.delayedRender) {\n                jQ.FusionCharts.delayedRender = {};\n            }\n            jQ.FusionCharts.delayedRender[chartObj.id] = elemList[i];\n\n            scriptElement = doc.createElement('script');\n            scriptElement.setAttribute('type', 'text/javascript');\n\n            if (/msie/i.test(win.navigator.userAgent) && !win.opera) {\n                scriptElement.text = 'FusionCharts.items[\\'' + chartObj.id + '\\'].render();';\n            } else {\n                scriptElement.appendChild(\n                    doc.createTextNode('FusionCharts.items[\\'' + chartObj.id + '\\'].render()')\n                );\n            }\n            elemList[i].appendChild(scriptElement);\n        }\n    }\n    return elemList;\n};\n\n/**\n *  Using jQuery's event model for attaching handlers to FusionCharts events.\n *  This is achieved by listening to the FusionCharts \"*\" event and then\n *  triggering a jQuery event on the associated DOM element.\n */\ncaptureAllFusionChartsEvents = function (eve, args) {\n    var containerElement,\n        event;\n\n    // Extending our event with the jQuery event model for proper\n    // delegation and bubbling.\n    event = jQ.extend({}, eve);\n    jQ.extend(event, jQ.Event('fusioncharts' + eve.eventType));\n\n    // Checking if there is an associated DOM object\n    if (event.sender && event.sender.options) {\n        containerElement = event.sender.options.containerElement ||\n            event.sender.options.containerElementId;\n\n        if (typeof containerElement === 'object') {\n            jQ(containerElement).trigger(event, args);\n        }\n        else if (jQ('#' + containerElement).length) {\n            jQ('#' + containerElement).trigger(event, args);\n        }\n        else {\n            jQ(doc).trigger(event, args);\n        }\n    } else {\n        // If there is no DOM object associated with the FusionCharts object\n        // then triggering the event on the document itself for any possible\n        // global handlers that might want to capture it.\n        jQ(doc).trigger(event, args);\n    }\n};\n\nFusionCharts.addEventListener('*', captureAllFusionChartsEvents);\n\n/**\n * Used to select all the HTML object/embed elements that have been created\n * using the FusionCharts constructor\n *\n * @param {jQuery} obj, the selection of elements that need to be processed.\n *\n */\ngetChartObjectsFromSelection = function (obj) {\n\n    // The HTML object/embed may be part of the current selection or a\n    // child of the current selection. Need to take both cases into account.\n    // @note If the FusionCharts object has not been rendered yet, e.g in\n    // case the container is not appended to the document, then 'find' for\n    // that element will NOT return the corresponding FusionCharts object.\n    return obj.filter(':FusionCharts').add(obj.find(':FusionCharts'));\n};\n\n/**\n *  Used to configure the links at various levels in a linked chart.\n *\n *  @param {jQuery} chartObjects The FusionCharts objects for which the link\n *  has to be configured.\n *\n *  @param {object} linkConfigObj contains the configuration details of the\n *  linked chart like swfUrl, height, width etc.\n *\n *  @param {string} level contains the level at which the user wants to\n *  configure the link.\n *\n */\nconfigureLinkedCharts = function (chartObjects, linkConfigObj, level) {\n\n    if (typeof linkConfigObj === 'object') {\n        chartObjects.each(function () {\n            this.configureLink(linkConfigObj, level);\n        });\n    }\n};\n\n/**\n * @id: jQuery.fn.insertFusionCharts\n * @id: $.fn.insertFusionCharts\n *\n * @param {object} options contains the parameters that need to be passed\n * to the FusionCharts constructor\n *\n * Inserts the FusionCharts objects in the HTML elements that are selected\n * by the jQuery selector.\n */\njQ.fn.insertFusionCharts = function (options) {\n    return renderFusionCharts(this, options);\n\n};\n\n/**\n * @id: jQuery.fn.appendFusionCharts\n * @id: $.fn.appendFusionCharts\n *\n * @param {object} options contains that parameters that need to be passed\n * to the FusionCharts constructor\n *\n * Appends the FusionCharts objects immediately after the HTML elements\n * that are selected by the jQuery selector.\n */\njQ.fn.appendFusionCharts = function (options) {\n    options.insertMode = 'append';\n    return renderFusionCharts(this, options);\n};\n\n/**\n * @id: jQuery.fn.prependFusionCharts\n * @id: $.fn.prependFusionCharts\n *\n * @param {object} options contains the parameters that need to be passed\n * to the FusionCharts constructor\n *\n *  Prepends the FusionCharts objects before the HTML elements that are\n *  selected by the jQuery selector.\n */\njQ.fn.prependFusionCharts = function (options) {\n    options.insertMode = 'prepend';\n    return renderFusionCharts(this, options);\n};\n\n/**\n * @id: jQuery.fn.attrFusionCharts\n * @id: $.fn.attrFusionCharts\n *\n * @param {object|string} attr, If this is a string then it contains\n * the FusionCharts object's attribute that needs to be set or fetched.\n * If it is an object then, it contains the attributes along with the\n * corresponding values that need to be set on the FusionCharts object\n *\n * @param {string} attrVal, To be used if attr is a string. Contains the\n * value that needs to be set for the attribute that attr corresponds to.\n *\n *  Used to set or get the attribute(s) of the FusionCharts object.\n */\njQ.fn.attrFusionCharts = function (attr, attrVal) {\n\n    /**\n     * @ignore\n     * @todo Remove ignore\n     *\n     * @var {jQuery} chartsObjects stores the FusionCharts objects in\n     * the selected HTML elements.\n     * @var {object} transfer Holds all atttributes to be returned to the\n     * callee Function.\n     */\n    var transfer = [],\n        chartObjects = getChartObjectsFromSelection(this);\n\n    if (attrVal !== undefined) {\n        // Set the charts attribute attr with value attrVal.\n\n        chartObjects.each(function () {\n            this.FusionCharts.setChartAttribute(attr, attrVal);\n        });\n        return this;\n    }\n    if (typeof attr === 'object') {\n            // Set the charts attributes, in the passed object's keys with\n            // the corresponding values.\n\n        chartObjects.each(function () {\n            this.FusionCharts.setChartAttribute(attr);\n        });\n        return this;\n    }\n\n    // If both the above cases fail, user is trying to, in accordance with the\n    // jQuery paradigm, get the value of the arrtibute.\n    chartObjects.each(function () {\n        transfer.push(\n            this.FusionCharts.getChartAttribute(attr)\n        );\n    });\n    return transfer;\n};\n\n/**\n * @id jQuery.fn.updateFusionCharts\n * @id $.fn.updateFusionCharts\n *\n * @param {object} options Contains the new options that the FusionCharts\n * objects need to update themselves with. Currently, using this interface\n * the dataType, data, width, height, debugMode and swfUrl can be updated.\n */\njQ.fn.updateFusionCharts = function (options) {\n\n    var filterOpts = {},\n        chartObjects = getChartObjectsFromSelection(this),\n        updateOptions = [\n            ['swfUrl', false],\n            ['type', false],\n            ['height', false],\n            ['width', false],\n            ['containerBackgroundColor', true],\n            ['containerBackgroundAlpha', true],\n            ['dataFormat', false],\n            ['dataSource', false]\n        ],\n        i,\n        l,\n        fcChart,\n        renderFlag,\n        optStr,\n        newChart;\n\n    for (i = 0, l = updateOptions.length; i < l; i += 1) {\n        optStr = updateOptions[i][0];\n        filterOpts.type = filterOpts.type || filterOpts.swfUrl;\n        if (options[optStr]) {\n            if (updateOptions[i][1]) {\n                renderFlag = true;\n            }\n            filterOpts[optStr] = options[optStr];\n        }\n    }\n\n    chartObjects.each(function () {\n        // If height and width are given then resize the chart first.\n        fcChart = this.FusionCharts;\n        if (renderFlag) {\n            newChart = fcChart.clone(filterOpts);\n            newChart.render();\n            return;\n        }\n\n        if (filterOpts.dataSource !== undefined || filterOpts.dataFormat !== undefined) {\n            if (filterOpts.dataSource === undefined) {\n                fcChart.setChartData(fcChart.args.dataSource, filterOpts.dataFormat);\n            } else if (filterOpts.dataFormat === undefined) {\n                fcChart.setChartData(filterOpts.dataSource, fcChart.args.dataFormat);\n            } else {\n                fcChart.setChartData(filterOpts.dataSource, filterOpts.dataFormat);\n            }\n        }\n        if (filterOpts.width !== undefined || filterOpts.height !== undefined) {\n            fcChart.resizeTo(filterOpts.width, filterOpts.height);\n        }\n        if (filterOpts.type) {\n            fcChart.chartType(filterOpts.type);\n        }\n    });\n\n    return this;\n};\n\n/**\n *  @id: jQuery.fn.cloneFusionCharts\n *  @id: $.fn.cloneFusionCharts\n *\n *  @param {object} options The options object that takes the additional\n *  parameters to be passed while cloning the FusionCharts object.\n *\n *  @param {function} callback The callback function that has to be called\n *  once the FusionCharts objects have been cloned. This function will take\n *  the new clone objects as parameter.\n *\n */\njQ.fn.cloneFusionCharts = function (callback, options) {\n\n    var transfer,\n        temp,\n        chartObjects;\n\n    // Check if the options parameter, which is not mandatory, has been\n    // passed or not. If not, that means that options is the callback function.\n    if (typeof callback !== 'function' && typeof options === 'function') {\n        temp = callback;\n        callback = options;\n        options = temp;\n    }\n\n    transfer = [];\n    chartObjects = getChartObjectsFromSelection(this);\n\n    chartObjects.each(function () {\n        transfer.push(this.FusionCharts.clone(options, {}, true));\n    });\n\n    callback.call(jQ(transfer), transfer);\n\n    return this;\n};\n\n/**\n *  @id: jQuery.fn.disposeFusionCharts\n *  @id: $.fn.disposeFusionCharts\n *\n */\njQ.fn.disposeFusionCharts = function () {\n\n    var chartObjects = getChartObjectsFromSelection(this);\n\n    chartObjects.each(function () {\n        // Execute dispose on charts.\n        this.FusionCharts.dispose();\n\n        // Remove identifier reference variable\n        delete this.FusionCharts;\n\n        // cleanup any static objects pertaining to FusionCharts.\n        if (this._fcDrillDownLevel === 0) {\n            delete this._fcDrillDownLevel;\n        }\n    });\n\n    return this;\n};\n\n/**\n * @id jQuery.fn.covertToFusionCharts\n * @id $.fn.convertToFusionCharts\n *\n * @param {object} chartOpts Configuration options to generate FusionCharts.\n * See documentation to get the list.\n *\n * @param {object} convertOpts Configuration options to convert the table\n * into a FusionCharts object.\n * See documentation to get the list.\n *\n */\njQ.fn.convertToFusionCharts = function (chartOpts, convertOpts) {\n\n    var transferObj = [];\n\n    if (typeof chartOpts.dataConfiguration === 'undefined') {\n        chartOpts.dataConfiguration = {};\n    }\n\n    jQ.extend(true, chartOpts.dataConfiguration, convertOpts);\n\n    if (!chartOpts.dataSource) {\n        chartOpts.dataSource = this.get(0);\n    }\n\n    if (!chartOpts.renderAt) {\n        this.each(function () {\n            transferObj.push(jQ('<div></div>')\n                .insertBefore(this)\n                .insertFusionCharts(chartOpts).get(0)\n            );\n        });\n    }\n    else {\n        if (typeof chartOpts.renderAt === 'string') {\n            transferObj.push(jQ('#' + chartOpts.renderAt)\n                .insertFusionCharts(chartOpts).get(0)\n            );\n        }\n        else if (typeof chartOpts.renderAt === 'object') {\n            transferObj.push(jQ(chartOpts.renderAt)\n                .insertFusionCharts(chartOpts).get(0)\n            );\n        }\n    }\n\n    return jQ(transferObj);\n};\n\n/**\n * @id jQuery.fn.drillDownFusionChartsTo\n * @id $.fn.drillDownFusionChartsTo\n *\n * Used to set multi-level configurations of linked FusionCharts objects.\n * The levels are iterated depending on the number of configuration objects\n * in a single jQuery chain.\n *\n * To set the configuration at a specific level please refer to docs.\n */\njQ.fn.drillDownFusionChartsTo = function () {\n    var chartObjects = getChartObjectsFromSelection(this),\n        j,\n        len,\n        i,\n        l,\n        configureOpts;\n\n\n    // hack to support chaining of multiple drillDowns in a single chain\n    if (typeof this._fcDrillDownLevel === 'undefined') {\n        this._fcDrillDownLevel = 0;\n    }\n\n    for (j = 0, len = arguments.length; j < len; j += 1) {\n        configureOpts = arguments[j];\n\n        if (isArray(configureOpts)) {\n            for (i = 0, l = configureOpts.length; i < l; i += 1) {\n                configureLinkedCharts(chartObjects, configureOpts[i], this._fcDrillDownLevel);\n                this._fcDrillDownLevel += 1;\n            }\n        } else {\n            configureLinkedCharts(chartObjects, configureOpts, this._fcDrillDownLevel);\n            this._fcDrillDownLevel += 1;\n        }\n    }\n    return this;\n};\n\n/**\n * @id jQuery.fn.streamFusionChartsData\n * @id $.fn.streamFusionChartsData\n *\n * @param {string} command. Contains the type of operation to be performed on\n * the realtime charts. If not provided, by default the command would be 'feed'\n * that invokes the feedData method of the chart and passes the options to it.\n *\n * @param {object} options. Contains the options that has to be parsed (if it is a js object)\n * and passed to the chart method (corresponding to command).\n * If not an object, it is passed as is to the chart method.\n *\n * @param {object} value. To make the API morph the data setter methods (setData, setDataForId),\n * it can also be passed the same parameters as the setter functions.\n *\n * @param {object} label. To make the API morph the data setter methods (setData, setDataForId),\n * it can also be passed the same parameters as the setter functions.\n**/\n\njQ.fn.streamFusionChartsData = function (command, options, value, label) {\n\n    var chartObjects = getChartObjectsFromSelection(this),\n        transfer = [],\n        fcChart,\n        method,\n        params;\n\n    // Convert the command to lower case and fetch the proper chart method name.\n    method = realtimeCommandMap[command && command.toLowerCase()];\n\n    // Check if the command provided is valid or not.\n    if (method === undefined) {\n        // this means the command is not a getter. which in turn means that\n        // the command is a data stream string and has to be handled accordingly.\n        if (arguments.length === 1) {\n            params = [command];\n            method = realtimeCommandMap.feed;\n        }\n        else {\n            return this;\n        }\n    }\n    else if (arguments.length === 1) {\n        // command is to invoke a method without any parameters..\n        params = [];\n    }\n    else {\n        // optionsParser returns an array of parameters to be passed to the\n        // chart method.\n        params = optionsParser[method](options, value, label);\n    }\n\n    if (method === 'getData' || method === 'getDataForId') {\n        chartObjects.each(function () {\n            fcChart = this.FusionCharts;\n            if (typeof fcChart[method] === 'function') {\n                transfer.push(fcChart[method].apply(fcChart, params));\n            }\n        });\n        return transfer;\n    }\n    else {\n        chartObjects.each(function () {\n            fcChart = this.FusionCharts;\n            if (typeof fcChart[method] === 'function') {\n                fcChart[method].apply(fcChart, params);\n            }\n        });\n        return this;\n    }\n};\n\njQ.extend(jQ.expr[':'], {\n    /**\n     *  Extending the jQuery selector to select all object/embed elements that\n     *  have been created using the FusionCharts constructor i.e that are an\n     *  instance of FusionCharts.\n     *\n     *  @param {object} obj, Is the HTML element that is currently being\n     *  checked.\n     */\n    FusionCharts: function (obj) {\n        return (obj.FusionCharts instanceof FusionCharts);\n    }\n});\n// }\n\n\n// WEBPACK FOOTER //\n// ./src/jquery-fusioncharts.js","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fusioncharts\"\n// module id = 1\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jquery\"\n// module id = 2\n// module chunks = 0","var win = window,\n    doc = win.document,\n    objectToStringFn = Object.prototype.toString,\n    merge = function (obj1, obj2) {\n        var item, str;\n        //check whether obj2 is an array\n        //if array then iterate through it's index\n        //**** MOOTOOLS precution\n        if (obj2 instanceof Array) {\n            for (item = 0; item < obj2.length; item += 1) {\n                if (typeof obj2[item] !== 'object') {\n                    obj1[item] = obj2[item];\n                } else {\n                    if (typeof obj1[item] !== 'object') {\n                        obj1[item] = obj2[item] instanceof Array ? [] : {};\n                    }\n                    merge(obj1[item], obj2[item]);\n                }\n            }\n        }\n        else {\n            for (item in obj2) {\n                if (typeof obj2[item] === 'object') {\n                    str = objectToStringFn.call(obj2[item]);\n                    if (str === '[object Object]') {\n                        if (typeof obj1[item] !== 'object') {\n                            obj1[item] = {};\n                        }\n                        merge(obj1[item], obj2[item]);\n                    }\n                    else if (str === '[object Array]') {\n                        if (!(obj1[item] instanceof Array)) {\n                            obj1[item] = [];\n                        }\n                        merge(obj1[item], obj2[item]);\n                    }\n                    else {\n                        obj1[item] = obj2[item];\n                    }\n                }\n                else {\n                    obj1[item] = obj2[item];\n                }\n            }\n        }\n        return obj1;\n    },\n    extend = function (sink, source, proto, deep) {\n        var item;\n        // When 'proto' is marked as true, the methods and properties\n        // of source is not added to the prototype of the sink.\n        if (proto && sink.prototype) {\n            sink = sink.prototype;\n        }\n\n        // If deep extend is specified, then we use the deep copy function\n        // 'merge'\n        if (deep === true) {\n            merge(sink, source);\n        }\n        // Copy all methods and properties of the object passed in parameter\n        // to the object to which this function is attached.\n        else {\n            for (item in source) {\n                sink[item] = source[item];\n            }\n        }\n\n        return sink;\n    },\n    /**\n     *  Used to remove all textNodes in an array of nodes. Textnodes get created\n     *  inadvertently, when the table HTML has newline and space. Returns an\n     *  array of nodes that is not an HTMLCollection and has only the non-text\n     *  nodes in it.\n     *\n     *  @param {array} nodeArr Contains the array of nodes that have to be\n     *  sanitized.\n     */\n    sanitizeNodesArray = function (nodeArr) {\n        var l, i, sanitizedArr = [];\n        for (i = 0, l = nodeArr.length; i < l; i += 1) {\n            // if nodeType != 3 then the node is not a text node.\n            if (nodeArr[i].nodeType !== 3) {\n                sanitizedArr.push(nodeArr[i]);\n            }\n        }\n        return sanitizedArr;\n    },\n\n\n    /**\n     * Used to merge two JSON objects. The copy is a deep copy and not a\n     * reference copy.\n     *\n     * @param: {object} srcJSON, the source json.\n     *\n     * @param: {object} targetJSON, that json that needs to be merged with the\n     * source json.\n     *\n     */\n    mergeJSON = function (srcJSON, targetJSON) {\n        var i,\n            len,\n            item;\n\n        if (targetJSON instanceof Array) {\n            for (i = 0, len = targetJSON.length; i < len; i++) {\n                if (targetJSON[i] instanceof Array) {\n                    if (srcJSON[i] === undefined) {\n                        srcJSON[i] = [];\n                    }\n                    mergeJSON(srcJSON[i], targetJSON[i]);\n                } else if (typeof targetJSON[i] === 'object') {\n                    if (typeof srcJSON[i] === 'undefined') {\n                        srcJSON[i] = {};\n                    }\n                    mergeJSON(srcJSON[i], targetJSON[i]);\n                } else {\n                    srcJSON[i] = targetJSON[i];\n                }\n            }\n        } else if (typeof targetJSON === 'object') {\n            for (item in targetJSON) {\n                if (typeof srcJSON[item] === 'undefined') {\n                    if (targetJSON[item] instanceof Array) {\n                        srcJSON[item] = [];\n                        mergeJSON(srcJSON[item], targetJSON[item]);\n                    } else if (typeof srcJSON[item] === 'object') {\n                        srcJSON[i] = {};\n                        mergeJSON(srcJSON[i], targetJSON[i]);\n                    } else {\n                        srcJSON[i] = targetJSON[i];\n                    }\n                }\n            }\n        }\n\n        return srcJSON;\n    },\n\n    /**\n     *  Returns the <tbody> element of the table. In order to support W3C\n     *  non-compliant HTML, wherein the table does not have a <tbody> containing\n     *  the <tr> & <td> elements, the table itself is returned.\n     *\n     *  @param {object} tbl Is the table whose tbody needs to fetched.\n     *\n     */\n    getTbody = function (tbl) {\n        var tbodyArr = sanitizeNodesArray(tbl.childNodes);\n\n        // Checking if the table's childNode is a tbody or not\n        if (tbodyArr.length) {\n            if (tbodyArr[0].nodeName === 'TBODY') {\n                return tbodyArr[0];\n            }\n            else if (tbodyArr[0].nodeName === 'THEAD' && tbodyArr[1] && tbodyArr[1].nodeName === 'TBODY') {\n                return tbodyArr[1];\n            }\n        }\n        return tbl;\n    },\n\n    /**\n     *  Returns an array containing the <td> in the <thead> tag.\n     *\n     *  @param {object} tbl Is the table whose tbody needs to fetched.\n     *\n     */\n    getThead = function (tbl) {\n        var tbodyArr = sanitizeNodesArray(tbl.childNodes);\n\n        // Checking if the table's childNode is a tbody or not\n        if (tbodyArr.length) {\n            if (tbodyArr[0].nodeName === 'THEAD' && tbodyArr[1] && tbodyArr[1].nodeName === 'TBODY') {\n                return tbodyArr[0].childNodes;\n            }\n        }\n        return [];\n    },\n\n    /**\n     *  Used to return the text in a given Element. Needed as firefox does not\n     *  support 'innerText', which is a W3C standard and instead uses\n     *  textContent attribute to store the text.\n     *\n     *  @param {object} nodeEle The HTML element whose text is needed.\n     */\n    getTextFromNode = function (nodeEle) {\n        return (nodeEle.innerText !== undefined) ? nodeEle.innerText : nodeEle.textContent;\n    },\n\n    /**\n     *  Used to convert an array of rows into an array of corresponding columns.\n     *\n     *  @param {array} rowArr The array of table rows that has to be transposed\n     *  into an array of columns.\n     */\n    getColumnArr = function (rowArr) {\n\n        var i,\n            j,\n            l,\n            len,\n            cellArr,\n            rowSpanInc,\n            colSpan = 1,\n            columnArrIdx,\n            rowSpan = {},\n            returnObj = [];\n\n        for (i = 0, l = rowArr.length; i < l; i += 1) {\n\n            // get all the cells of the row\n            cellArr = sanitizeNodesArray(rowArr[i].childNodes);\n            colSpan = 1;\n            rowSpanInc = 0;\n            for (j = 0, len = cellArr.length; j < len; j += 1) {\n\n                // if a previous row had a cell with a rowspan then this\n                // rowspan needs to be taken into account while creating\n                // column array.\n                columnArrIdx = j + colSpan + rowSpanInc - 1;\n                if (rowSpan[columnArrIdx] &&\n                        ((i - rowSpan[columnArrIdx].rowNum) < rowSpan[columnArrIdx].row)) {\n                    rowSpanInc += rowSpan[columnArrIdx].col;\n                    columnArrIdx += rowSpan[columnArrIdx].col;\n                }\n\n                if (parseInt(cellArr[j].getAttribute('rowspan'), 10) > 1) {\n                    if (!rowSpan[columnArrIdx]) {\n                        rowSpan[columnArrIdx] = {};\n                    }\n                    rowSpan[columnArrIdx].rowNum = i;\n                    rowSpan[columnArrIdx].row = parseInt(cellArr[j].getAttribute('rowspan'), 10);\n                    // If the cell has both a rowspan and a colspan then they\n                    // both need to be taken into consideration while calculating\n                    // the column of cells in the susequent rows\n                    if (parseInt(cellArr[j].getAttribute('colspan'), 10) > 1) {\n                        rowSpan[columnArrIdx].col = parseInt(cellArr[j].getAttribute('colspan'), 10);\n                    } else {\n                        rowSpan[columnArrIdx].col = 1;\n                    }\n                }\n\n                // The previous cells colspan, and the previous rows rowspans\n                // also needs to be added to the current cells index to get the\n                // proper column index.\n                while (returnObj.length <= columnArrIdx) {\n                    returnObj.push({childNodes: []});\n                }\n                returnObj[columnArrIdx].childNodes.push(cellArr[j]);\n\n                // Adding the current cells colspan for subsequent cells in the\n                // current row.\n                if (parseInt(cellArr[j].getAttribute('colspan'), 10) > 1) {\n                    colSpan += parseInt(cellArr[j].getAttribute('colspan'), 10) - 1;\n                }\n            }\n        }\n\n        return returnObj;\n    },\n\n    /**\n     * Used to check if an item is present in an array or not.\n     *\n     * @param {array} arr The array which has to be checked\n     *\n     * @param {string|number|object} item The item which needs be checked if\n     * present in array arr or not.\n     */\n    arrayContains = function (arr, item) {\n        var i = arr.length;\n        // Using a decrementing while loop (optimization) since the order in which the\n        // array is traversed doesn't matter.\n        while (i) {\n            i -= 1;\n            if (arr[i] === item) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /**\n     * Used to check if a particular row or column has all non numeric (or blank)\n     * content. If so, then that particular row/column must be ignored.\n     *\n     * @param {array} nodeArr Is an array of all the rows/columns of the table.\n     *\n     * @param {number} index of the row/column that is not to be analysed as it\n     * has already been set aside as the label row/column.\n     *\n     * @param {number} j is the cell index at which we have to check for the\n     * presence of numeric data in all the other rows and columns.\n     */\n\n    checkData = function (nodeArr, j, index) {\n\n        var i,\n            l,\n            childArr = sanitizeNodesArray(nodeArr[j].childNodes),\n            text;\n\n        for (i = 0, l = childArr.length; i < l; i += 1) {\n            if (i !== index) {\n                text = getTextFromNode(childArr[i]);\n                if (parseFloat(text) === text) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    _blankString = '__fcBLANK__',\n    _blankNo = 0,\n    /**\n     * Used to get the table row that has the labels (categories or legend) and\n     * extract the label details from the corresponding row.\n     *\n     * @param {array} nodeArr Is an array of all the rows/columns of the table.\n     *\n     * @param {array} ignoreArr Is an array of all the indexes in the nodeArr\n     * that need to be ignored. The items of this array can be negative as well.\n     *\n     * @param {string} index If the label row/column details have been given by\n     * the user then this will contain the index which has the labels.\n     *\n     */\n    getLabels = function (nodeArr, ignoreArr, index, opts) {\n\n        var len, l, i, j, childArr, mostEmptyCellRow = null, internalLabel = [],\n            emptyCellCount = [], textCellCount = 0, temp, returnObj = {},\n            spanTotal = 0, spanLen, isRowLabel, maxIdx, spanLength, totalSpanLength = 0, tLabels;\n\n\n        if (typeof index === 'undefined') {\n        // Checking if the user has provided the index. If index has not been\n        // passed then we assume that the user does not want to give a label row\n        // or column.\n\n            // Creating custom labels for all cells in the first row/column.\n            childArr = sanitizeNodesArray(nodeArr[0].childNodes);\n            for (j = 0, len = childArr.length; j < len; j += 1) {\n                spanLen = j + spanTotal;\n                internalLabel[spanLen] = _blankString + (spanLen + 1);\n\n                temp = parseInt(childArr[j].colSpan, 10);\n                temp = (temp > 1) ? temp : parseInt(childArr[j].rowSpan, 10);\n                if (temp > 1) {\n                    for (l = 1; l < temp; l += 1) {\n                        internalLabel[spanLen + l] = _blankString + (spanLen + l + 1);\n                    }\n                    spanTotal += (temp - 1);\n                }\n            }\n\n            // Deleting the labels for the rows/columns that the user wants to\n            // ignore.\n            for (i = 0, l = (j + spanTotal), len = ignoreArr.length; i < len; i += 1) {\n                if (ignoreArr[i] > 0) {\n                    delete internalLabel[ignoreArr[i] - 1];\n                } else {\n                    delete internalLabel[l + ignoreArr[i]];\n                }\n            }\n\n            return {'index': -1, 'labelObj': internalLabel};\n\n        } else if (index === 0) {\n            // Checking if the user has provided the index. Since we expect row/column\n            // indices starting from 1, if index is 0 then we use our internal logic\n            // to find the label array from the given nodeArr.\n            for (i = 0, l = nodeArr.length; i < l; i += 1) {\n                childArr = sanitizeNodesArray(nodeArr[i].childNodes);\n                emptyCellCount[i] = 0;\n                textCellCount = 0;\n\n                if(opts && opts._extractByHeaderTag){\n                    for (j = 0, len = childArr.length; j < len; j += 1) {\n                        if(childArr[j].nodeName.toLowerCase() != 'th'){\n                            continue;\n                        }\n                        tLabels = getLabels(nodeArr, ignoreArr, i + 1);\n                        delete tLabels.labelObj[opts._rowLabelIndex];\n                        return tLabels;\n                    }\n                }else{\n                    for (j = 0, len = childArr.length; j < len; j += 1) {\n                        if (arrayContains(ignoreArr, (j + 1)) ||\n                                arrayContains(ignoreArr, (j - len))) {\n                            continue;\n                        }\n                        temp = getTextFromNode(childArr[j]);\n                        // Checking if the cell is emtpy.\n                        if (temp.replace(/^\\s*/, '').replace(/\\s*$/, '') === '') {\n                            emptyCellCount[i] += 1;\n                            continue;\n                        }\n                        // Checking if the cell has a non-number content\n                        if (parseFloat(temp) != temp) {\n                            textCellCount += 1;\n                            // If there are at least 2 cells that have non-number\n                            // content then we assume that they contain labels and\n                            // fetch the labels from this array of nodes.\n                            if (textCellCount > 1) {\n                                return getLabels(nodeArr, ignoreArr, i + 1);\n                            }\n                        }\n                    }\n                }\n                // If there are empty cells then we assume that the array with\n                // the most number of empty cells must be the label array.\n                if (i > 0) {\n                    if (emptyCellCount[i - 1] > emptyCellCount[i]) {\n                        mostEmptyCellRow = i - 1;\n                    } else if (emptyCellCount[i - 1] < emptyCellCount[i]) {\n                        mostEmptyCellRow = i;\n                    }\n                }\n            }\n            if (mostEmptyCellRow !== null) {\n                return getLabels(nodeArr, ignoreArr, mostEmptyCellRow + 1);\n            } else {\n                return getLabels(nodeArr, ignoreArr);\n            }\n        }\n\n        // If this is a negative number then, calulate the index from the\n        // end of the table. e.g -1 would imply the last row.\n        if (index < 0) {\n            index += nodeArr.length;\n        } else if (index > 0) {\n            index -= 1;\n        }\n\n        /**\n         * Once we have the index of the row/column that contains the labels we\n         * go through only that row/column and extract the labels.\n         */\n        childArr = sanitizeNodesArray(nodeArr[index].childNodes);\n\n        isRowLabel = (nodeArr[0].nodeType !== undefined) ? true : false;\n        for (j = 0, len = childArr.length; j < len; j += 1) {\n            spanLength = 0;\n            if (isRowLabel) {\n                if (childArr[j].colSpan !== '1') {\n                    spanLength = parseInt(childArr[j].colSpan, 10);\n                }\n            } else if (childArr[j].rowSpan !== '1') {\n                spanLength = parseInt(childArr[j].rowSpan, 10);\n            }\n            spanLength = (spanLength > 1) ? spanLength : 0;\n            temp = getTextFromNode(childArr[j]);\n            if (temp.replace(/^\\s*/, '').replace(/\\s*$/, '') !== '') {\n                returnObj[j + totalSpanLength] = temp;\n            } else if (checkData(getColumnArr(nodeArr), j, index)) {\n                // if the label text is missing in one of the cells of the labels\n                // row/column we check for the presence of numeric data in other\n                // cells of the corresponding column/row.\n\n                returnObj[j + totalSpanLength] = _blankString + _blankNo;\n                _blankNo += 1;\n            }\n\n            if (spanLength > 1) {\n                // If the spanLength > 1, then we create additional labels for\n                // rows/columns pertaining to the rowspan or colspan.\n                temp = returnObj[j + totalSpanLength];\n                for (i = 1; i < spanLength; i += 1) {\n                    returnObj[j + totalSpanLength + i] = temp + ' (' + i + ')';\n                }\n\n                // totalSpanLength is used to adjust the indices of the\n                // subsequent cells using the rowspan/colspan of the current\n                // cell.\n                totalSpanLength += (spanLength - 1);\n            }\n        }\n\n        // Deleting the rows/columns that the user wants to ignore.\n        maxIdx = len + totalSpanLength;\n        for (i = 0, len = ignoreArr.length; i < len; i += 1) {\n            if (ignoreArr[i] > 0) {\n                delete returnObj[ignoreArr[i] - 1];\n            } else {\n                delete returnObj[maxIdx + ignoreArr[i]];\n            }\n        }\n\n        return {'labelObj': returnObj, 'index': index};\n    },\n\n    extractDataFromTable = function (tbl, opts) {\n\n        if (typeof tbl === 'string') {\n            tbl = doc.getElementById(tbl);\n        }\n\n        if ((typeof win.jQuery !== 'undefined') && (tbl instanceof win.jQuery)) { // jshint ignore: line\n            tbl = tbl.get(0);\n        }\n\n        if (!tbl) {\n            return {data: null};\n        }\n\n        if (opts.hideTable) {\n            tbl.style.display = 'none';\n        }\n\n        var i,\n            j,\n            rowCells,\n            cellText,\n            dataMap = {},\n            mapColumnIdx,\n            columnSpan,\n            len,\n            item,\n            rowSpan,\n            cellEle,\n            columnSpanObj = {},\n            rowSpanObj = {},\n            tableRows = sanitizeNodesArray(getThead(tbl)).concat(sanitizeNodesArray(getTbody(tbl).childNodes)),\n            l = tableRows.length,\n            dataRows = 0,\n            dataColumns = 0,\n            tempColumn = 0,\n            rowLabelMap,\n            m,\n            k = 0,\n            columnLabelMap,\n            isSingleSeries = false,\n            chartType = opts.chartType,\n            tempMap,\n\n            singleSeriesCharts = ['column2d', 'column3d', 'pie3d', 'pie2d',\n                'line', 'bar2d', 'area2d', 'doughnut2d',\n                'doughnut3d', 'pareto2d', 'pareto3d'];\n\n\n        if(singleSeriesCharts.indexOf(chartType) !== -1){\n            isSingleSeries = true;\n        }\n\n\n\n        // use rowLabelSource and colLabelSource to avoid confusion\n        opts.rowLabelSource = parseInt(opts.labelSource, 10);\n        opts.colLabelSource = parseInt(opts.legendSource, 10);\n        // Create the labels objects for the chart.\n\n        if (opts.major === 'column') {\n            rowLabelMap = opts.useLabels ?\n                getLabels(tableRows, opts.ignoreCols, opts.rowLabelSource) :\n                getLabels(tableRows, opts.ignoreCols);\n\n            columnLabelMap = opts.useLegend ?\n                getLabels(getColumnArr(tableRows), opts.ignoreRows, opts.colLabelSource) :\n                getLabels(getColumnArr(tableRows), opts.ignoreRows);\n        }else{\n            tempMap = getLabels(getColumnArr(tableRows), opts.ignoreRows, opts.rowLabelSource);\n            if(!opts.useLabels){\n                rowLabelMap = getLabels(getColumnArr(tableRows), opts.ignoreRows);\n            }else{\n                rowLabelMap = tempMap;\n            }\n\n            opts._rowLabelIndex = tempMap.index;\n            opts._extractByHeaderTag = true;\n\n            columnLabelMap = opts.useLegend ?\n                getLabels(tableRows, opts.ignoreCols, opts.colLabelSource, opts) :\n                getLabels(tableRows, opts.ignoreCols);\n\n            delete opts._extractByHeaderTag;\n\n            tempMap = rowLabelMap;\n            rowLabelMap = columnLabelMap;\n            columnLabelMap = tempMap;\n        }\n\n        delete rowLabelMap.labelObj[columnLabelMap.index];\n        delete columnLabelMap.labelObj[rowLabelMap.index];\n\n        // Creating the 2d map depending on whether the rows are the primary\n        // keys or the columns.\n        if (opts.major === 'row') {\n            for (item in columnLabelMap.labelObj) {\n                dataMap[item] = {};\n            }\n        } else {\n            for (item in rowLabelMap.labelObj) {\n                dataMap[item] = {};\n            }\n        }\n\n        // Populating the dataMap.\n        for (i = 0; i < l; i += 1) {\n            if (rowLabelMap.index === i ||\n                    (columnLabelMap.labelObj[i] === undefined)) {\n                continue;\n            }\n\n            dataRows += 1;\n            rowCells = sanitizeNodesArray(tableRows[i].childNodes);\n\n            // columnSpanObj maintains the number of colspans in the current\n            // row.\n            // rowSpanObj maintains the number of rowspans in a rows x columns\n            // map.\n            columnSpanObj[i] = 0;\n            rowSpanObj[i] = {};\n\n            for (j = 0, len = rowCells.length; j < len; j += 1) {\n\n                cellEle = rowCells[j];\n\n                columnSpan = parseInt(cellEle.getAttribute('colspan'), 10);\n                rowSpan = parseInt(cellEle.getAttribute('rowspan'), 10);\n\n                mapColumnIdx = j + columnSpanObj[i];\n\n                // Calculating the position of the current cell in the dataMap.\n                while (k < i) {\n                    if (rowSpanObj[k]) {\n                        for (m in rowSpanObj[k]) {\n                            if (m > mapColumnIdx) {\n                                break;\n                            }\n\n                            if ((i - k) <= rowSpanObj[k][m].row) {\n                                mapColumnIdx += rowSpanObj[k][m].col;\n                            }\n                        }\n                    }\n                    k += 1;\n                }\n\n                if (columnSpan > 1) {\n                    columnSpanObj[i] += (columnSpan - 1);\n                }\n\n                if (rowSpan > 1) {\n                    if (columnSpan > 1) {\n                        rowSpanObj[i][mapColumnIdx] = {\n                            row: (rowSpan - 1),\n                            col: columnSpan\n                        };\n                    } else {\n                        rowSpanObj[i][mapColumnIdx] = {\n                            row: (rowSpan - 1),\n                            col: 1\n                        };\n                    }\n                }\n                if (columnLabelMap.index === mapColumnIdx ||\n                    (rowLabelMap.labelObj[mapColumnIdx] === undefined)) {\n\n                    continue;\n                }\n\n                tempColumn += 1;\n                cellText = getTextFromNode(cellEle);\n                // If the cell does not have any text then we covert it by\n                // default to 0 or to an parameterized option set by user.\n                if (cellText.replace(/^\\s*/, '').replace(/\\s*$/, '') === '') {\n                    if (opts.convertBlankTo) {\n                        cellText = opts.convertBlankTo;\n                    } else {\n                        continue;\n                    }\n                }\n\n                // Filling up the dataMap based on the rowspan, colspan and\n                // position(row=i, column=mapColumnIdx) information of the\n                // table cell.\n                columnSpan = (columnSpan > 1) ? columnSpan : 1;\n                rowSpan = (rowSpan > 1) ? rowSpan : 1;\n\n                if (opts.major === 'row') {\n                    k = 0;\n                    while (k < columnSpan) {\n                        m = 0;\n                        while (m < rowSpan) {\n                            dataMap[i + m][mapColumnIdx + k] = parseFloat(cellText);\n                            m += 1;\n                        }\n                        k += 1;\n                    }\n                }\n                else {\n                    k = 0;\n                    while (k < columnSpan) {\n                        m = 0;\n                        while (m < rowSpan) {\n                            dataMap[mapColumnIdx + k][i + m] = parseFloat(cellText);\n                            m += 1;\n                        }\n                        k += 1;\n                    }\n                }\n            }\n            if (tempColumn > dataColumns) {\n                dataColumns = tempColumn;\n            }\n        }\n\n        return {\n            data: dataMap,\n            chartType: chartType ? (!isSingleSeries ? 'multi' : 'single') :\n                ((dataRows > 1 && dataColumns > 1) ? 'multi' : 'single'),\n            labelMap: columnLabelMap,\n            legendMap: rowLabelMap\n        };\n    },\n\n    createChartFromTable = function (data, obj) {\n\n        // Default configuration for HTMLTable data-handler\n        var opts = {\n                chartAttributes: { },\n                major: 'row',\n                useLabels: true,\n                useLegend: true,\n                labelSource: 0,\n                legendSource: 0,\n                ignoreCols: [],\n                ignoreRows: [],\n                showLabels: true,\n                showLegend: true,\n                seriesColors: [],\n                convertBlankTo: '0',\n                hideTable: false,\n                chartType: obj.chartType && obj.chartType(),\n\n                // Private Variables\n                labels: [],\n                legend: [],\n                data: []\n            }, config = obj.args.dataConfiguration || {},\n            i, item1, item2, categoryArr, datasetArr, chartJSON = {},\n            datasets = {}, dataObj, dataMap, labelMap, legendMap;\n\n        extend(opts, config);\n\n        dataObj = extractDataFromTable(data, opts);\n        dataMap = dataObj.data;\n\n        if (opts.major !== 'row') {\n            labelMap = dataObj.legendMap,\n            legendMap = dataObj.labelMap;\n        } else {\n            labelMap = dataObj.labelMap,\n            legendMap = dataObj.legendMap;\n        }\n\n        // chartAttributes should contain the configuration attributes for the chart\n        // e.g caption, xAxisName, yAxisName etc.\n        chartJSON.chart = extend({}, opts.chartAttributes);\n\n        if (dataObj.chartType === 'multi') {\n            chartJSON.categories = [{'category': []}];\n            chartJSON.dataset = [];\n\n            categoryArr = chartJSON.categories[0].category;\n            datasetArr = chartJSON.dataset;\n\n            i = 0;\n            for (item1 in dataMap) {\n\n                if (opts.showLabels === true) {\n                    // If the user has provided custom labels then those should be\n                    // shown instead of the extracted labels.\n                    categoryArr.push(extend({\n                        label: (labelMap.labelObj[item1].indexOf(_blankString) != -1) ?\n                            '' : labelMap.labelObj[item1]\n                    },\n                    opts.labels[i]));\n                } else {\n                    categoryArr.push({'label': ''});\n                }\n                i += 1;\n                for (item2 in dataMap[item1]) {\n                    if (typeof datasets[item2] === 'undefined') {\n                        datasets[item2] = [];\n                    }\n                    datasets[item2].push({'value': dataMap[item1][item2]});\n                }\n            }\n\n            i = 0;\n            for (item1 in datasets) {\n                if (opts.showLegend === true) {\n                    // If the user has provided custom labels then those should be\n                    // shown instead of the extracted labels.\n                    datasetArr.push(extend({\n                        'seriesname': ((legendMap.labelObj[item1].indexOf(_blankString) !== -1) ?\n                            '' : legendMap.labelObj[item1]),\n                        'data': datasets[item1]\n                    }, opts.legend[i]));\n                } else {\n                    datasetArr.push({\n                        'seriesname': '',\n                        'data': datasets[item1]\n                    });\n                }\n                i += 1;\n            }\n        } else if (dataObj.chartType === 'single') {\n            chartJSON.data = [];\n            datasetArr = chartJSON.data;\n\n            i = 0;\n            if (opts.showLabels) {\n                for (item1 in dataMap) {\n                    for (item2 in dataMap[item1]) {\n                        datasetArr.push(extend({\n                            label: ((labelMap.labelObj[item1].indexOf(_blankString) !== -1) ?\n                            '' : labelMap.labelObj[item1]),\n                            value: dataMap[item1][item2]\n                        }, opts.labels[i]));\n\n                        i += 1;\n                    }\n                }\n            } else {\n                for (item1 in dataMap) {\n                    for (item2 in dataMap[item1]) {\n                        datasetArr.push({'value': dataMap[item1][item2]});\n                    }\n                }\n            }\n        }\n\n        return {\n            data: chartJSON,\n            error: undefined\n        };\n    },\n    htmlTableToJSON = function (data, obj) {\n        return createChartFromTable(data, obj);\n    };\n\n/**\n * method to set the HTML table data\n * @param {Object} dom: HTML table dom\n */\nfunction setHTMLTableData (dom) {\n    this.setChartData(dom, 'htmltable');\n}\n/**\n * method to add functions in the fusioncharts prototype\n * @param {Function} FusionCharts is required\n * @return {Object} for extension\n */\nfunction wrapper (FusionCharts) {\n    FusionCharts && (FusionCharts.prototype.setHTMLTableData = setHTMLTableData);\n    return {\n        format: 'htmltable',\n        toJSON: htmlTableToJSON\n    };\n}\n\nmodule.exports = {\n    extension: wrapper,\n    name: 'HTMLTable',\n    type: 'transcoder',\n    requiresFusionCharts: true\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/transcoder-htmltable/transcoder-htmltable.js"],"sourceRoot":""}